
LogSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08002ca0  08002ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df4  08002df4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002df4  08002df4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002df4  08002df4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08002e6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002e6c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006995  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d26  00000000  00000000  00026a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  00028758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  00028fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017204  00000000  00000000  00029770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000951a  00000000  00000000  00040974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b6e  00000000  00000000  00049e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce9fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002018  00000000  00000000  000cea4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002c88 	.word	0x08002c88

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08002c88 	.word	0x08002c88

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	0002      	movs	r2, r0
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800041c:	1dfb      	adds	r3, r7, #7
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b7f      	cmp	r3, #127	; 0x7f
 8000422:	d809      	bhi.n	8000438 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	001a      	movs	r2, r3
 800042a:	231f      	movs	r3, #31
 800042c:	401a      	ands	r2, r3
 800042e:	4b04      	ldr	r3, [pc, #16]	; (8000440 <__NVIC_EnableIRQ+0x30>)
 8000430:	2101      	movs	r1, #1
 8000432:	4091      	lsls	r1, r2
 8000434:	000a      	movs	r2, r1
 8000436:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	b002      	add	sp, #8
 800043e:	bd80      	pop	{r7, pc}
 8000440:	e000e100 	.word	0xe000e100

08000444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	0002      	movs	r2, r0
 800044c:	6039      	str	r1, [r7, #0]
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b7f      	cmp	r3, #127	; 0x7f
 8000458:	d828      	bhi.n	80004ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <__NVIC_SetPriority+0xd4>)
 800045c:	1dfb      	adds	r3, r7, #7
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	b25b      	sxtb	r3, r3
 8000462:	089b      	lsrs	r3, r3, #2
 8000464:	33c0      	adds	r3, #192	; 0xc0
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	589b      	ldr	r3, [r3, r2]
 800046a:	1dfa      	adds	r2, r7, #7
 800046c:	7812      	ldrb	r2, [r2, #0]
 800046e:	0011      	movs	r1, r2
 8000470:	2203      	movs	r2, #3
 8000472:	400a      	ands	r2, r1
 8000474:	00d2      	lsls	r2, r2, #3
 8000476:	21ff      	movs	r1, #255	; 0xff
 8000478:	4091      	lsls	r1, r2
 800047a:	000a      	movs	r2, r1
 800047c:	43d2      	mvns	r2, r2
 800047e:	401a      	ands	r2, r3
 8000480:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	019b      	lsls	r3, r3, #6
 8000486:	22ff      	movs	r2, #255	; 0xff
 8000488:	401a      	ands	r2, r3
 800048a:	1dfb      	adds	r3, r7, #7
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	0018      	movs	r0, r3
 8000490:	2303      	movs	r3, #3
 8000492:	4003      	ands	r3, r0
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000498:	481f      	ldr	r0, [pc, #124]	; (8000518 <__NVIC_SetPriority+0xd4>)
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b25b      	sxtb	r3, r3
 80004a0:	089b      	lsrs	r3, r3, #2
 80004a2:	430a      	orrs	r2, r1
 80004a4:	33c0      	adds	r3, #192	; 0xc0
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004aa:	e031      	b.n	8000510 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ac:	4a1b      	ldr	r2, [pc, #108]	; (800051c <__NVIC_SetPriority+0xd8>)
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	0019      	movs	r1, r3
 80004b4:	230f      	movs	r3, #15
 80004b6:	400b      	ands	r3, r1
 80004b8:	3b08      	subs	r3, #8
 80004ba:	089b      	lsrs	r3, r3, #2
 80004bc:	3306      	adds	r3, #6
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	18d3      	adds	r3, r2, r3
 80004c2:	3304      	adds	r3, #4
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	1dfa      	adds	r2, r7, #7
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	0011      	movs	r1, r2
 80004cc:	2203      	movs	r2, #3
 80004ce:	400a      	ands	r2, r1
 80004d0:	00d2      	lsls	r2, r2, #3
 80004d2:	21ff      	movs	r1, #255	; 0xff
 80004d4:	4091      	lsls	r1, r2
 80004d6:	000a      	movs	r2, r1
 80004d8:	43d2      	mvns	r2, r2
 80004da:	401a      	ands	r2, r3
 80004dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	019b      	lsls	r3, r3, #6
 80004e2:	22ff      	movs	r2, #255	; 0xff
 80004e4:	401a      	ands	r2, r3
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	0018      	movs	r0, r3
 80004ec:	2303      	movs	r3, #3
 80004ee:	4003      	ands	r3, r0
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <__NVIC_SetPriority+0xd8>)
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	001c      	movs	r4, r3
 80004fc:	230f      	movs	r3, #15
 80004fe:	4023      	ands	r3, r4
 8000500:	3b08      	subs	r3, #8
 8000502:	089b      	lsrs	r3, r3, #2
 8000504:	430a      	orrs	r2, r1
 8000506:	3306      	adds	r3, #6
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	18c3      	adds	r3, r0, r3
 800050c:	3304      	adds	r3, #4
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b003      	add	sp, #12
 8000516:	bd90      	pop	{r4, r7, pc}
 8000518:	e000e100 	.word	0xe000e100
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <MX_DMA_Init+0x34>)
 8000528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <MX_DMA_Init+0x34>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	639a      	str	r2, [r3, #56]	; 0x38
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_DMA_Init+0x34>)
 8000534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000536:	2201      	movs	r2, #1
 8000538:	4013      	ands	r3, r2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 800053e:	2100      	movs	r1, #0
 8000540:	2009      	movs	r0, #9
 8000542:	f7ff ff7f 	bl	8000444 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000546:	2009      	movs	r0, #9
 8000548:	f7ff ff62 	bl	8000410 <__NVIC_EnableIRQ>

}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000

08000558 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <LL_IOP_GRP1_EnableClock+0x28>)
 8000562:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <LL_IOP_GRP1_EnableClock+0x28>)
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	430a      	orrs	r2, r1
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <LL_IOP_GRP1_EnableClock+0x28>)
 800056e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4013      	ands	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b004      	add	sp, #16
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000

08000584 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b002      	add	sp, #8
 800059a:	bd80      	pop	{r7, pc}

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	003b      	movs	r3, r7
 80005a4:	0018      	movs	r0, r3
 80005a6:	2318      	movs	r3, #24
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f001 fee4 	bl	8002378 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80005b0:	2004      	movs	r0, #4
 80005b2:	f7ff ffd1 	bl	8000558 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 80005b6:	2020      	movs	r0, #32
 80005b8:	f7ff ffce 	bl	8000558 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80005bc:	2001      	movs	r0, #1
 80005be:	f7ff ffcb 	bl	8000558 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80005c2:	23a0      	movs	r3, #160	; 0xa0
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2120      	movs	r1, #32
 80005c8:	0018      	movs	r0, r3
 80005ca:	f7ff ffdb 	bl	8000584 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80005ce:	003b      	movs	r3, r7
 80005d0:	2220      	movs	r2, #32
 80005d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2201      	movs	r2, #1
 80005d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80005da:	003b      	movs	r3, r7
 80005dc:	2202      	movs	r2, #2
 80005de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005e0:	003b      	movs	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005e6:	003b      	movs	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80005ec:	003a      	movs	r2, r7
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fb06 	bl	8001c06 <LL_GPIO_Init>

}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b006      	add	sp, #24
 8000600:	bd80      	pop	{r7, pc}

08000602 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	4013      	ands	r3, r2
 8000612:	2b80      	cmp	r3, #128	; 0x80
 8000614:	d101      	bne.n	800061a <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8000616:	2301      	movs	r3, #1
 8000618:	e000      	b.n	800061c <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 800061a:	2300      	movs	r3, #0
}
 800061c:	0018      	movs	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	b002      	add	sp, #8
 8000622:	bd80      	pop	{r7, pc}

08000624 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	000a      	movs	r2, r1
 800062e:	1cfb      	adds	r3, r7, #3
 8000630:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8000632:	1cfb      	adds	r3, r7, #3
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <HAL_printf_valist>:

/** Custom printf function in order to use HAL_UART_Transmit()
 * @param *fmt String to print
 * @param argp Parameters list
 */
void HAL_printf_valist(const char *fmt, va_list argp) {
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b09d      	sub	sp, #116	; 0x74
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  char string[PRINT_BUFFER_SIZE];

  if (vsprintf(string, fmt, argp) > 0) {
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	240c      	movs	r4, #12
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	f001 fec0 	bl	80023dc <vsiprintf>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	dd0a      	ble.n	8000676 <HAL_printf_valist+0x32>
	  uart_transmit_buffer((uint8_t*)string, strlen(string));
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff fd4c 	bl	8000100 <strlen>
 8000668:	0002      	movs	r2, r0
 800066a:	193b      	adds	r3, r7, r4
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f000 f850 	bl	8000714 <uart_transmit_buffer>
  } else {
    uart_transmit_buffer((uint8_t*)"E - Print\n", 14);
  }
}
 8000674:	e004      	b.n	8000680 <HAL_printf_valist+0x3c>
    uart_transmit_buffer((uint8_t*)"E - Print\n", 14);
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <HAL_printf_valist+0x44>)
 8000678:	210e      	movs	r1, #14
 800067a:	0018      	movs	r0, r3
 800067c:	f000 f84a 	bl	8000714 <uart_transmit_buffer>
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b01d      	add	sp, #116	; 0x74
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	08002ca0 	.word	0x08002ca0

0800068c <HAL_printf>:

/** Custom printf function, only translate to va_list arg HAL_UART.
 * @param *fmt String to print
 * @param ... Data
 */
void HAL_printf(const char *fmt, ...) {
 800068c:	b40f      	push	{r0, r1, r2, r3}
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
  va_list argp;

  va_start(argp, fmt);
 8000694:	2314      	movs	r3, #20
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	607b      	str	r3, [r7, #4]
  HAL_printf_valist(fmt, argp);
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff ffcf 	bl	8000644 <HAL_printf_valist>
  va_end(argp);
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bc80      	pop	{r7}
 80006ae:	bc08      	pop	{r3}
 80006b0:	b004      	add	sp, #16
 80006b2:	4718      	bx	r3

080006b4 <logSTM>:
/** Generic LOG procedure
 * @param Log level
 * @param *fmt String to print
 * @param argp Parameters list
 */
void logSTM(uint8_t level, const char *fmt, va_list argp) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	210f      	movs	r1, #15
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	1c02      	adds	r2, r0, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	HAL_printf("%c - ", level);
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <logSTM+0x34>)
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff ffdc 	bl	800068c <HAL_printf>
	HAL_printf_valist(fmt, argp);
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff ffb2 	bl	8000644 <HAL_printf_valist>
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b004      	add	sp, #16
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	08002cac 	.word	0x08002cac

080006ec <logI>:

/** LOG procedure - Info
 * @param *fmt String to print
 * @param ... Parameters list
 */
void logI(const char* fmt, ...) {
 80006ec:	b40f      	push	{r0, r1, r2, r3}
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
  va_list argp;

	va_start(argp, fmt);
 80006f4:	2314      	movs	r3, #20
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	607b      	str	r3, [r7, #4]
	logSTM('I', fmt, argp);
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	0019      	movs	r1, r3
 8000700:	2049      	movs	r0, #73	; 0x49
 8000702:	f7ff ffd7 	bl	80006b4 <logSTM>
	va_end(argp);
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bc80      	pop	{r7}
 800070e:	bc08      	pop	{r3}
 8000710:	b004      	add	sp, #16
 8000712:	4718      	bx	r3

08000714 <uart_transmit_buffer>:
  logSTM('E', fmt, argp);
  va_end(argp);
}

static void uart_transmit_buffer(uint8_t* data, uint32_t size)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < size; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	e012      	b.n	800074a <uart_transmit_buffer+0x36>
    {
        // Проверка, готов ли UART для передачи данных
        while (!LL_USART_IsActiveFlag_TXE(USART2));
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <uart_transmit_buffer+0x48>)
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff ff6a 	bl	8000602 <LL_USART_IsActiveFlag_TXE_TXFNF>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d0f9      	beq.n	8000726 <uart_transmit_buffer+0x12>

        // Запись данных в регистр передачи UART
        LL_USART_TransmitData8(USART2, data[i]);
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	18d3      	adds	r3, r2, r3
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <uart_transmit_buffer+0x48>)
 800073c:	0019      	movs	r1, r3
 800073e:	0010      	movs	r0, r2
 8000740:	f7ff ff70 	bl	8000624 <LL_USART_TransmitData8>
    for (uint32_t i = 0; i < size; i++)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3301      	adds	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d3e8      	bcc.n	8000724 <uart_transmit_buffer+0x10>
    }
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b004      	add	sp, #16
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40004400 	.word	0x40004400

08000760 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <LL_RCC_HSI_Enable+0x18>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <LL_RCC_HSI_Enable+0x18>)
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	0049      	lsls	r1, r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000

0800077c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <LL_RCC_HSI_IsReady+0x24>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	401a      	ands	r2, r3
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	429a      	cmp	r2, r3
 8000790:	d101      	bne.n	8000796 <LL_RCC_HSI_IsReady+0x1a>
 8000792:	2301      	movs	r3, #1
 8000794:	e000      	b.n	8000798 <LL_RCC_HSI_IsReady+0x1c>
 8000796:	2300      	movs	r3, #0
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <LL_RCC_SetSysClkSource+0x24>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	2207      	movs	r2, #7
 80007b2:	4393      	bics	r3, r2
 80007b4:	0019      	movs	r1, r3
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <LL_RCC_SetSysClkSource+0x24>)
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	430a      	orrs	r2, r1
 80007bc:	609a      	str	r2, [r3, #8]
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40021000 	.word	0x40021000

080007cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <LL_RCC_GetSysClkSource+0x14>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	2238      	movs	r2, #56	; 0x38
 80007d6:	4013      	ands	r3, r2
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	40021000 	.word	0x40021000

080007e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <LL_RCC_SetAHBPrescaler+0x24>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <LL_RCC_SetAHBPrescaler+0x28>)
 80007f2:	4013      	ands	r3, r2
 80007f4:	0019      	movs	r1, r3
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <LL_RCC_SetAHBPrescaler+0x24>)
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	430a      	orrs	r2, r1
 80007fc:	609a      	str	r2, [r3, #8]
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40021000 	.word	0x40021000
 800080c:	fffff0ff 	.word	0xfffff0ff

08000810 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <LL_RCC_SetAPB1Prescaler+0x24>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <LL_RCC_SetAPB1Prescaler+0x28>)
 800081e:	4013      	ands	r3, r2
 8000820:	0019      	movs	r1, r3
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	430a      	orrs	r2, r1
 8000828:	609a      	str	r2, [r3, #8]
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40021000 	.word	0x40021000
 8000838:	ffff8fff 	.word	0xffff8fff

0800083c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	4013      	ands	r3, r2
 8000852:	041a      	lsls	r2, r3, #16
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	43db      	mvns	r3, r3
 8000858:	6839      	ldr	r1, [r7, #0]
 800085a:	400b      	ands	r3, r1
 800085c:	431a      	orrs	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	619a      	str	r2, [r3, #24]
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b004      	add	sp, #16
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f000 ffdf 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000876:	f000 f83d 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087a:	f7ff fe8f 	bl	800059c <MX_GPIO_Init>
  MX_DMA_Init();
 800087e:	f7ff fe4f 	bl	8000520 <MX_DMA_Init>
  //MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  uart_init();
 8000882:	f000 fe33 	bl	80014ec <uart_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  initQueue(&queue);
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <main+0x78>)
 8000888:	0018      	movs	r0, r3
 800088a:	f000 f860 	bl	800094e <initQueue>

  enqueue(&queue, "Hello");
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <main+0x7c>)
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <main+0x78>)
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f000 f88d 	bl	80009b4 <enqueue>
  enqueue(&queue, "World");
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <main+0x80>)
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <main+0x78>)
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 f887 	bl	80009b4 <enqueue>

  //uint8_t str[] = "Test";
  while (1)
  {

	  LL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80008a6:	23a0      	movs	r3, #160	; 0xa0
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	2120      	movs	r1, #32
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff ffc5 	bl	800083c <LL_GPIO_TogglePin>
	  LL_mDelay(500);
 80008b2:	23fa      	movs	r3, #250	; 0xfa
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fd02 	bl	80022c0 <LL_mDelay>

	  if(!isQueueEmpty(&queue)){
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <main+0x78>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 f85a 	bl	8000978 <isQueueEmpty>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d1ee      	bne.n	80008a6 <main+0x3a>
		  char* item = dequeue(&queue);
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <main+0x78>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 f8b8 	bl	8000a40 <dequeue>
 80008d0:	0003      	movs	r3, r0
 80008d2:	607b      	str	r3, [r7, #4]
		  logI("Dequeued item: %s\r\n", item);
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <main+0x84>)
 80008d8:	0011      	movs	r1, r2
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff ff06 	bl	80006ec <logI>
	  LL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80008e0:	e7e1      	b.n	80008a6 <main+0x3a>
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	08002cb4 	.word	0x08002cb4
 80008ec:	08002cbc 	.word	0x08002cbc
 80008f0:	08002cc4 	.word	0x08002cc4

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 80008f8:	f7ff ff32 	bl	8000760 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	f7ff ff3d 	bl	800077c <LL_RCC_HSI_IsReady>
 8000902:	0003      	movs	r3, r0
 8000904:	2b01      	cmp	r3, #1
 8000906:	d1fa      	bne.n	80008fe <SystemClock_Config+0xa>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ff6b 	bl	80007e4 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the HSI */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff ff48 	bl	80007a4 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	f7ff ff59 	bl	80007cc <LL_RCC_GetSysClkSource>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d1fb      	bne.n	8000916 <SystemClock_Config+0x22>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff76 	bl	8000810 <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(16000000);
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SystemClock_Config+0x4c>)
 8000926:	0018      	movs	r0, r3
 8000928:	f001 fcee 	bl	8002308 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800092c:	2000      	movs	r0, #0
 800092e:	f000 ffa1 	bl	8001874 <HAL_InitTick>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000936:	f000 f805 	bl	8000944 <Error_Handler>
  }
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	00f42400 	.word	0x00f42400

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>

0800094e <initQueue>:
 */
#include "queue.h"

#include "logSTM.h"

void initQueue(Queue* queue) {
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
    queue->front = 0;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	22c8      	movs	r2, #200	; 0xc8
 800095a:	2100      	movs	r1, #0
 800095c:	5099      	str	r1, [r3, r2]
    queue->rear = -1;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	21cc      	movs	r1, #204	; 0xcc
 8000962:	2201      	movs	r2, #1
 8000964:	4252      	negs	r2, r2
 8000966:	505a      	str	r2, [r3, r1]
    queue->count = 0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	22d0      	movs	r2, #208	; 0xd0
 800096c:	2100      	movs	r1, #0
 800096e:	5099      	str	r1, [r3, r2]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <isQueueEmpty>:

int isQueueEmpty(Queue* queue) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    return (queue->count == 0);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	22d0      	movs	r2, #208	; 0xd0
 8000984:	589b      	ldr	r3, [r3, r2]
 8000986:	425a      	negs	r2, r3
 8000988:	4153      	adcs	r3, r2
 800098a:	b2db      	uxtb	r3, r3
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b002      	add	sp, #8
 8000992:	bd80      	pop	{r7, pc}

08000994 <isQueueFull>:

int isQueueFull(Queue* queue) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
    return (queue->count == QUEUE_SIZE);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	22d0      	movs	r2, #208	; 0xd0
 80009a0:	589b      	ldr	r3, [r3, r2]
 80009a2:	3b0a      	subs	r3, #10
 80009a4:	425a      	negs	r2, r3
 80009a6:	4153      	adcs	r3, r2
 80009a8:	b2db      	uxtb	r3, r3
}
 80009aa:	0018      	movs	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b002      	add	sp, #8
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <enqueue>:

void enqueue(Queue* queue, const char* item) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
    if (isQueueFull(queue)) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ffe7 	bl	8000994 <isQueueFull>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d004      	beq.n	80009d4 <enqueue+0x20>
    	logI("Queue is full. Unable to enqueue.\n");
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <enqueue+0x88>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff fe8d 	bl	80006ec <logI>
        return;
 80009d2:	e02f      	b.n	8000a34 <enqueue+0x80>
    }
    queue->rear = (queue->rear + 1) % QUEUE_SIZE;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	22cc      	movs	r2, #204	; 0xcc
 80009d8:	589b      	ldr	r3, [r3, r2]
 80009da:	3301      	adds	r3, #1
 80009dc:	210a      	movs	r1, #10
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fd10 	bl	8000404 <__aeabi_idivmod>
 80009e4:	000b      	movs	r3, r1
 80009e6:	0019      	movs	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	22cc      	movs	r2, #204	; 0xcc
 80009ec:	5099      	str	r1, [r3, r2]
    memset(queue->buffer[queue->rear],0,STRING_LENGTH);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	22cc      	movs	r2, #204	; 0xcc
 80009f2:	589a      	ldr	r2, [r3, r2]
 80009f4:	0013      	movs	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	189b      	adds	r3, r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	18d3      	adds	r3, r2, r3
 8000a00:	2214      	movs	r2, #20
 8000a02:	2100      	movs	r1, #0
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 fcb7 	bl	8002378 <memset>
    strncpy(queue->buffer[queue->rear], item, STRING_LENGTH);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	22cc      	movs	r2, #204	; 0xcc
 8000a0e:	589a      	ldr	r2, [r3, r2]
 8000a10:	0013      	movs	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	189b      	adds	r3, r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	18d3      	adds	r3, r2, r3
 8000a1c:	6839      	ldr	r1, [r7, #0]
 8000a1e:	2214      	movs	r2, #20
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 fcb1 	bl	8002388 <strncpy>
    queue->count++;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	22d0      	movs	r2, #208	; 0xd0
 8000a2a:	589b      	ldr	r3, [r3, r2]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	21d0      	movs	r1, #208	; 0xd0
 8000a32:	505a      	str	r2, [r3, r1]
}
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	08002cd8 	.word	0x08002cd8

08000a40 <dequeue>:

char* dequeue(Queue* queue) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    if (isQueueEmpty(queue)) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff ff94 	bl	8000978 <isQueueEmpty>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d005      	beq.n	8000a60 <dequeue+0x20>
    	logI("Queue is empty. Unable to dequeue.\n");
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <dequeue+0x68>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff fe48 	bl	80006ec <logI>
        return NULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e01e      	b.n	8000a9e <dequeue+0x5e>
    }

    char* item = queue->buffer[queue->front];
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	22c8      	movs	r2, #200	; 0xc8
 8000a64:	589a      	ldr	r2, [r3, r2]
 8000a66:	0013      	movs	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	189b      	adds	r3, r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1) % QUEUE_SIZE;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	22c8      	movs	r2, #200	; 0xc8
 8000a78:	589b      	ldr	r3, [r3, r2]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	210a      	movs	r1, #10
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fcc0 	bl	8000404 <__aeabi_idivmod>
 8000a84:	000b      	movs	r3, r1
 8000a86:	0019      	movs	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	22c8      	movs	r2, #200	; 0xc8
 8000a8c:	5099      	str	r1, [r3, r2]

    queue->count--;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	22d0      	movs	r2, #208	; 0xd0
 8000a92:	589b      	ldr	r3, [r3, r2]
 8000a94:	1e5a      	subs	r2, r3, #1
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	21d0      	movs	r1, #208	; 0xd0
 8000a9a:	505a      	str	r2, [r3, r1]

    return item;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	08002cfc 	.word	0x08002cfc

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	430a      	orrs	r2, r1
 8000abc:	641a      	str	r2, [r3, #64]	; 0x40
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0549      	lsls	r1, r1, #21
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_MspInit+0x44>)
 8000ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	055b      	lsls	r3, r3, #21
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40021000 	.word	0x40021000

08000af4 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2202      	movs	r2, #2
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d101      	bne.n	8000b0c <LL_DMA_IsActiveFlag_TC1+0x18>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e000      	b.n	8000b0e <LL_DMA_IsActiveFlag_TC1+0x1a>
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <LL_DMA_IsActiveFlag_HT1>:
  * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2204      	movs	r2, #4
 8000b24:	4013      	ands	r3, r2
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	d101      	bne.n	8000b2e <LL_DMA_IsActiveFlag_HT1+0x18>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e000      	b.n	8000b30 <LL_DMA_IsActiveFlag_HT1+0x1a>
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2202      	movs	r2, #2
 8000b44:	605a      	str	r2, [r3, #4]
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <LL_DMA_ClearFlag_HT1>:
  * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2204      	movs	r2, #4
 8000b5a:	605a      	str	r2, [r3, #4]
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000b72:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <LL_DMA_IsEnabledIT_TC+0x34>)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	18d3      	adds	r3, r2, r3
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	18d3      	adds	r3, r2, r3
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2202      	movs	r2, #2
 8000b84:	4013      	ands	r3, r2
                    DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d101      	bne.n	8000b8e <LL_DMA_IsEnabledIT_TC+0x2a>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <LL_DMA_IsEnabledIT_TC+0x2c>
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b004      	add	sp, #16
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	08002d20 	.word	0x08002d20

08000b9c <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000baa:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <LL_DMA_IsEnabledIT_HT+0x34>)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	18d3      	adds	r3, r2, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4013      	ands	r3, r2
                    DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d101      	bne.n	8000bc6 <LL_DMA_IsEnabledIT_HT+0x2a>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e000      	b.n	8000bc8 <LL_DMA_IsEnabledIT_HT+0x2c>
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b004      	add	sp, #16
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08002d20 	.word	0x08002d20

08000bd4 <LL_USART_IsActiveFlag_IDLE>:
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	2210      	movs	r2, #16
 8000be2:	4013      	ands	r3, r2
 8000be4:	2b10      	cmp	r3, #16
 8000be6:	d101      	bne.n	8000bec <LL_USART_IsActiveFlag_IDLE+0x18>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <LL_USART_ClearFlag_IDLE>:
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2210      	movs	r2, #16
 8000c02:	621a      	str	r2, [r3, #32]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <LL_USART_IsEnabledIT_IDLE>:
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2210      	movs	r2, #16
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b10      	cmp	r3, #16
 8000c1e:	d101      	bne.n	8000c24 <LL_USART_IsEnabledIT_IDLE+0x18>
 8000c20:	2301      	movs	r3, #1
 8000c22:	e000      	b.n	8000c26 <LL_USART_IsEnabledIT_IDLE+0x1a>
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c52:	f000 fe59 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

    if (LL_DMA_IsEnabledIT_HT(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_HT1(DMA1)) {
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <DMA1_Channel1_IRQHandler+0x50>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	0018      	movs	r0, r3
 8000c66:	f7ff ff99 	bl	8000b9c <LL_DMA_IsEnabledIT_HT>
 8000c6a:	1e03      	subs	r3, r0, #0
 8000c6c:	d009      	beq.n	8000c82 <DMA1_Channel1_IRQHandler+0x26>
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <DMA1_Channel1_IRQHandler+0x50>)
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff ff50 	bl	8000b16 <LL_DMA_IsActiveFlag_HT1>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d003      	beq.n	8000c82 <DMA1_Channel1_IRQHandler+0x26>
        LL_DMA_ClearFlag_HT1(DMA1);             /* Clear half-transfer complete flag */
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <DMA1_Channel1_IRQHandler+0x50>)
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ff66 	bl	8000b4e <LL_DMA_ClearFlag_HT1>
       // usart_rx_check();                       /* Check for data to process */
    }

    /* Check transfer-complete interrupt */
    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_1) && LL_DMA_IsActiveFlag_TC1(DMA1)) {
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <DMA1_Channel1_IRQHandler+0x50>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff ff6c 	bl	8000b64 <LL_DMA_IsEnabledIT_TC>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d009      	beq.n	8000ca4 <DMA1_Channel1_IRQHandler+0x48>
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <DMA1_Channel1_IRQHandler+0x50>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff ff2e 	bl	8000af4 <LL_DMA_IsActiveFlag_TC1>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d003      	beq.n	8000ca4 <DMA1_Channel1_IRQHandler+0x48>
        LL_DMA_ClearFlag_TC1(DMA1);             /* Clear transfer complete flag */
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <DMA1_Channel1_IRQHandler+0x50>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff ff4a 	bl	8000b38 <LL_DMA_ClearFlag_TC1>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	40020000 	.word	0x40020000

08000cb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
    if (LL_USART_IsEnabledIT_IDLE(USART2) && LL_USART_IsActiveFlag_IDLE(USART2)) {
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <USART2_IRQHandler+0x30>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff ffa8 	bl	8000c0c <LL_USART_IsEnabledIT_IDLE>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d00b      	beq.n	8000cd8 <USART2_IRQHandler+0x28>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <USART2_IRQHandler+0x30>)
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff ff86 	bl	8000bd4 <LL_USART_IsActiveFlag_IDLE>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d005      	beq.n	8000cd8 <USART2_IRQHandler+0x28>
        LL_USART_ClearFlag_IDLE(USART2);        /* Clear IDLE line flag */                      /* Check for data to process */
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <USART2_IRQHandler+0x30>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff ff91 	bl	8000bf6 <LL_USART_ClearFlag_IDLE>

        uart_rx_check();
 8000cd4:	f000 fcf8 	bl	80016c8 <uart_rx_check>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	18d3      	adds	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f001 fb06 	bl	8002324 <__errno>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425b      	negs	r3, r3
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	18d2      	adds	r2, r2, r3
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <_sbrk+0x64>)
 8000d34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b006      	add	sp, #24
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20009000 	.word	0x20009000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	20000160 	.word	0x20000160
 8000d4c:	20000198 	.word	0x20000198

08000d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <__NVIC_EnableIRQ>:
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	0002      	movs	r2, r0
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6e:	d809      	bhi.n	8000d84 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	001a      	movs	r2, r3
 8000d76:	231f      	movs	r3, #31
 8000d78:	401a      	ands	r2, r3
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_EnableIRQ+0x30>)
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4091      	lsls	r1, r2
 8000d80:	000a      	movs	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	0002      	movs	r2, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b7f      	cmp	r3, #127	; 0x7f
 8000da4:	d828      	bhi.n	8000df8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da6:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <__NVIC_SetPriority+0xd4>)
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	33c0      	adds	r3, #192	; 0xc0
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	589b      	ldr	r3, [r3, r2]
 8000db6:	1dfa      	adds	r2, r7, #7
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	0011      	movs	r1, r2
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	00d2      	lsls	r2, r2, #3
 8000dc2:	21ff      	movs	r1, #255	; 0xff
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	43d2      	mvns	r2, r2
 8000dca:	401a      	ands	r2, r3
 8000dcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	22ff      	movs	r2, #255	; 0xff
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0018      	movs	r0, r3
 8000ddc:	2303      	movs	r3, #3
 8000dde:	4003      	ands	r3, r0
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de4:	481f      	ldr	r0, [pc, #124]	; (8000e64 <__NVIC_SetPriority+0xd4>)
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	430a      	orrs	r2, r1
 8000df0:	33c0      	adds	r3, #192	; 0xc0
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	501a      	str	r2, [r3, r0]
}
 8000df6:	e031      	b.n	8000e5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <__NVIC_SetPriority+0xd8>)
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0019      	movs	r1, r3
 8000e00:	230f      	movs	r3, #15
 8000e02:	400b      	ands	r3, r1
 8000e04:	3b08      	subs	r3, #8
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3306      	adds	r3, #6
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	3304      	adds	r3, #4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	1dfa      	adds	r2, r7, #7
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	0011      	movs	r1, r2
 8000e18:	2203      	movs	r2, #3
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	00d2      	lsls	r2, r2, #3
 8000e1e:	21ff      	movs	r1, #255	; 0xff
 8000e20:	4091      	lsls	r1, r2
 8000e22:	000a      	movs	r2, r1
 8000e24:	43d2      	mvns	r2, r2
 8000e26:	401a      	ands	r2, r3
 8000e28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	019b      	lsls	r3, r3, #6
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	401a      	ands	r2, r3
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	0018      	movs	r0, r3
 8000e38:	2303      	movs	r3, #3
 8000e3a:	4003      	ands	r3, r0
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <__NVIC_SetPriority+0xd8>)
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	001c      	movs	r4, r3
 8000e48:	230f      	movs	r3, #15
 8000e4a:	4023      	ands	r3, r4
 8000e4c:	3b08      	subs	r3, #8
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	430a      	orrs	r2, r1
 8000e52:	3306      	adds	r3, #6
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	18c3      	adds	r3, r0, r3
 8000e58:	3304      	adds	r3, #4
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b003      	add	sp, #12
 8000e62:	bd90      	pop	{r4, r7, pc}
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	2207      	movs	r2, #7
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d900      	bls.n	8000e8c <NVIC_EncodePriority+0x20>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3302      	adds	r3, #2
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b05      	subs	r3, #5
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	425a      	negs	r2, r3
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	4259      	negs	r1, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	4099      	lsls	r1, r3
 8000ebc:	000b      	movs	r3, r1
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b008      	add	sp, #32
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <LL_DMA_EnableChannel>:
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LL_DMA_EnableChannel+0x3c>)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	18d3      	adds	r3, r2, r3
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	18d3      	adds	r3, r2, r3
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4907      	ldr	r1, [pc, #28]	; (8000f0c <LL_DMA_EnableChannel+0x3c>)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	18cb      	adds	r3, r1, r3
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	18cb      	adds	r3, r1, r3
 8000efc:	2101      	movs	r1, #1
 8000efe:	430a      	orrs	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	08002d88 	.word	0x08002d88

08000f10 <LL_DMA_SetDataTransferDirection>:
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000f20:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <LL_DMA_SetDataTransferDirection+0x44>)
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	18d3      	adds	r3, r2, r3
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	001a      	movs	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	18d3      	adds	r3, r2, r3
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <LL_DMA_SetDataTransferDirection+0x48>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	0019      	movs	r1, r3
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <LL_DMA_SetDataTransferDirection+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	18d3      	adds	r3, r2, r3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	001a      	movs	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	18d3      	adds	r3, r2, r3
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b006      	add	sp, #24
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	08002d88 	.word	0x08002d88
 8000f58:	ffffbfef 	.word	0xffffbfef

08000f5c <LL_DMA_SetMode>:
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <LL_DMA_SetMode+0x44>)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	001a      	movs	r2, r3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	18d3      	adds	r3, r2, r3
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	4393      	bics	r3, r2
 8000f80:	0019      	movs	r1, r3
 8000f82:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <LL_DMA_SetMode+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	18d3      	adds	r3, r2, r3
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	18d3      	adds	r3, r2, r3
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b006      	add	sp, #24
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	08002d88 	.word	0x08002d88

08000fa4 <LL_DMA_SetPeriphIncMode>:
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2240      	movs	r2, #64	; 0x40
 8000fc6:	4393      	bics	r3, r2
 8000fc8:	0019      	movs	r1, r3
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	18d3      	adds	r3, r2, r3
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	18d3      	adds	r3, r2, r3
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b006      	add	sp, #24
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	08002d88 	.word	0x08002d88

08000fec <LL_DMA_SetMemoryIncMode>:
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <LL_DMA_SetMemoryIncMode+0x44>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	18d3      	adds	r3, r2, r3
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	18d3      	adds	r3, r2, r3
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	4393      	bics	r3, r2
 8001010:	0019      	movs	r1, r3
 8001012:	4a07      	ldr	r2, [pc, #28]	; (8001030 <LL_DMA_SetMemoryIncMode+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	18d3      	adds	r3, r2, r3
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	001a      	movs	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	18d3      	adds	r3, r2, r3
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b006      	add	sp, #24
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	08002d88 	.word	0x08002d88

08001034 <LL_DMA_SetPeriphSize>:
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <LL_DMA_SetPeriphSize+0x44>)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	18d3      	adds	r3, r2, r3
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	001a      	movs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	18d3      	adds	r3, r2, r3
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <LL_DMA_SetPeriphSize+0x48>)
 8001056:	4013      	ands	r3, r2
 8001058:	0019      	movs	r1, r3
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <LL_DMA_SetPeriphSize+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	18d3      	adds	r3, r2, r3
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	001a      	movs	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	18d3      	adds	r3, r2, r3
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b006      	add	sp, #24
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	08002d88 	.word	0x08002d88
 800107c:	fffffcff 	.word	0xfffffcff

08001080 <LL_DMA_SetMemorySize>:
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <LL_DMA_SetMemorySize+0x44>)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	18d3      	adds	r3, r2, r3
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	001a      	movs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	18d3      	adds	r3, r2, r3
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <LL_DMA_SetMemorySize+0x48>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	0019      	movs	r1, r3
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <LL_DMA_SetMemorySize+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	18d3      	adds	r3, r2, r3
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	001a      	movs	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	18d3      	adds	r3, r2, r3
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b006      	add	sp, #24
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	08002d88 	.word	0x08002d88
 80010c8:	fffff3ff 	.word	0xfffff3ff

080010cc <LL_DMA_SetChannelPriorityLevel>:
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	18d3      	adds	r3, r2, r3
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	001a      	movs	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	18d3      	adds	r3, r2, r3
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a09      	ldr	r2, [pc, #36]	; (8001114 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	0019      	movs	r1, r3
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	18d3      	adds	r3, r2, r3
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	001a      	movs	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	18d3      	adds	r3, r2, r3
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b006      	add	sp, #24
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	08002d88 	.word	0x08002d88
 8001114:	ffffcfff 	.word	0xffffcfff

08001118 <LL_DMA_SetDataLength>:
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LL_DMA_SetDataLength+0x40>)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	18d3      	adds	r3, r2, r3
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	001a      	movs	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	0c1b      	lsrs	r3, r3, #16
 800113a:	0419      	lsls	r1, r3, #16
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <LL_DMA_SetDataLength+0x40>)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	18d3      	adds	r3, r2, r3
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	001a      	movs	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	18d3      	adds	r3, r2, r3
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	430a      	orrs	r2, r1
 800114e:	605a      	str	r2, [r3, #4]
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b006      	add	sp, #24
 8001156:	bd80      	pop	{r7, pc}
 8001158:	08002d88 	.word	0x08002d88

0800115c <LL_DMA_GetDataLength>:
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800116a:	4a07      	ldr	r2, [pc, #28]	; (8001188 <LL_DMA_GetDataLength+0x2c>)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	001a      	movs	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	18d3      	adds	r3, r2, r3
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	041b      	lsls	r3, r3, #16
 800117c:	0c1b      	lsrs	r3, r3, #16
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b004      	add	sp, #16
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	08002d88 	.word	0x08002d88

0800118c <LL_DMA_SetMemoryAddress>:
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <LL_DMA_SetMemoryAddress+0x2c>)
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	18d3      	adds	r3, r2, r3
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	001a      	movs	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	18d3      	adds	r3, r2, r3
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	60da      	str	r2, [r3, #12]
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b006      	add	sp, #24
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	08002d88 	.word	0x08002d88

080011bc <LL_DMA_SetPeriphAddress>:
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <LL_DMA_SetPeriphAddress+0x2c>)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	18d3      	adds	r3, r2, r3
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	001a      	movs	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	609a      	str	r2, [r3, #8]
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b006      	add	sp, #24
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	08002d88 	.word	0x08002d88

080011ec <LL_DMA_SetPeriphRequest>:
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	0a9b      	lsrs	r3, r3, #10
 80011fc:	4a0f      	ldr	r2, [pc, #60]	; (800123c <LL_DMA_SetPeriphRequest+0x50>)
 80011fe:	405a      	eors	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <LL_DMA_SetPeriphRequest+0x54>)
 8001212:	4694      	mov	ip, r2
 8001214:	4463      	add	r3, ip
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	223f      	movs	r2, #63	; 0x3f
 800121a:	4393      	bics	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	18d3      	adds	r3, r2, r3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4a06      	ldr	r2, [pc, #24]	; (8001240 <LL_DMA_SetPeriphRequest+0x54>)
 8001228:	4694      	mov	ip, r2
 800122a:	4463      	add	r3, ip
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b006      	add	sp, #24
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	00100080 	.word	0x00100080
 8001240:	40020800 	.word	0x40020800

08001244 <LL_DMA_EnableIT_TC>:
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <LL_DMA_EnableIT_TC+0x3c>)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	18d3      	adds	r3, r2, r3
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	001a      	movs	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	18d3      	adds	r3, r2, r3
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4907      	ldr	r1, [pc, #28]	; (8001280 <LL_DMA_EnableIT_TC+0x3c>)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	18cb      	adds	r3, r1, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0019      	movs	r1, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	18cb      	adds	r3, r1, r3
 8001270:	2102      	movs	r1, #2
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b004      	add	sp, #16
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	08002d88 	.word	0x08002d88

08001284 <LL_DMA_EnableIT_HT>:
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LL_DMA_EnableIT_HT+0x3c>)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	18d3      	adds	r3, r2, r3
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	001a      	movs	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	18d3      	adds	r3, r2, r3
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4907      	ldr	r1, [pc, #28]	; (80012c0 <LL_DMA_EnableIT_HT+0x3c>)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	18cb      	adds	r3, r1, r3
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	0019      	movs	r1, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	18cb      	adds	r3, r1, r3
 80012b0:	2104      	movs	r1, #4
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b004      	add	sp, #16
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	08002d88 	.word	0x08002d88

080012c4 <LL_AHB1_GRP1_EnableClock>:
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <LL_AHB1_GRP1_EnableClock+0x28>)
 80012ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <LL_AHB1_GRP1_EnableClock+0x28>)
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <LL_AHB1_GRP1_EnableClock+0x28>)
 80012da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000

080012f0 <LL_APB1_GRP1_EnableClock>:
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <LL_APB1_GRP1_EnableClock+0x28>)
 80012fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <LL_APB1_GRP1_EnableClock+0x28>)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	430a      	orrs	r2, r1
 8001302:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <LL_APB1_GRP1_EnableClock+0x28>)
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000

0800131c <LL_IOP_GRP1_EnableClock>:
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <LL_IOP_GRP1_EnableClock+0x28>)
 8001326:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <LL_IOP_GRP1_EnableClock+0x28>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	430a      	orrs	r2, r1
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <LL_IOP_GRP1_EnableClock+0x28>)
 8001332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4013      	ands	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b004      	add	sp, #16
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000

08001348 <LL_USART_Enable>:
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2201      	movs	r2, #1
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	601a      	str	r2, [r3, #0]
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}

08001364 <LL_USART_DisableFIFO>:
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a03      	ldr	r2, [pc, #12]	; (8001380 <LL_USART_DisableFIFO+0x1c>)
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}
 8001380:	dfffffff 	.word	0xdfffffff

08001384 <LL_USART_SetTXFIFOThreshold>:
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800138e:	f3ef 8310 	mrs	r3, PRIMASK
 8001392:	60bb      	str	r3, [r7, #8]
  return(result);
 8001394:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	2301      	movs	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f383 8810 	msr	PRIMASK, r3
}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	075b      	lsls	r3, r3, #29
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	f383 8810 	msr	PRIMASK, r3
}
 80013c0:	46c0      	nop			; (mov r8, r8)
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b006      	add	sp, #24
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <LL_USART_SetRXFIFOThreshold>:
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013d6:	f3ef 8310 	mrs	r3, PRIMASK
 80013da:	60bb      	str	r3, [r7, #8]
  return(result);
 80013dc:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	2301      	movs	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f383 8810 	msr	PRIMASK, r3
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <LL_USART_SetRXFIFOThreshold+0x48>)
 80013f2:	401a      	ands	r2, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	065b      	lsls	r3, r3, #25
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	f383 8810 	msr	PRIMASK, r3
}
 8001408:	46c0      	nop			; (mov r8, r8)
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b006      	add	sp, #24
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	f1ffffff 	.word	0xf1ffffff

08001418 <LL_USART_ConfigAsyncMode>:
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <LL_USART_ConfigAsyncMode+0x2c>)
 8001426:	401a      	ands	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	222a      	movs	r2, #42	; 0x2a
 8001432:	4393      	bics	r3, r2
 8001434:	001a      	movs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	ffffb7ff 	.word	0xffffb7ff

08001448 <LL_USART_EnableIT_IDLE>:
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001450:	f3ef 8310 	mrs	r3, PRIMASK
 8001454:	60bb      	str	r3, [r7, #8]
  return(result);
 8001456:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	2301      	movs	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f383 8810 	msr	PRIMASK, r3
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2210      	movs	r2, #16
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f383 8810 	msr	PRIMASK, r3
}
 800147c:	46c0      	nop			; (mov r8, r8)
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b006      	add	sp, #24
 8001484:	bd80      	pop	{r7, pc}

08001486 <LL_USART_EnableDMAReq_RX>:
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800148e:	f3ef 8310 	mrs	r3, PRIMASK
 8001492:	60bb      	str	r3, [r7, #8]
  return(result);
 8001494:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	2301      	movs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f383 8810 	msr	PRIMASK, r3
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2240      	movs	r2, #64	; 0x40
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f383 8810 	msr	PRIMASK, r3
}
 80014ba:	46c0      	nop			; (mov r8, r8)
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b006      	add	sp, #24
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <LL_USART_DMA_GetRegAddr>:
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d103      	bne.n	80014dc <LL_USART_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3328      	adds	r3, #40	; 0x28
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e002      	b.n	80014e2 <LL_USART_DMA_GetRegAddr+0x1e>
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3324      	adds	r3, #36	; 0x24
 80014e0:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b004      	add	sp, #16
 80014ea:	bd80      	pop	{r7, pc}

080014ec <uart_init>:
uint8_t usart_rx_dma_buffer[24];
extern   Queue queue;



void uart_init(void){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b08f      	sub	sp, #60	; 0x3c
 80014f0:	af00      	add	r7, sp, #0

	LL_USART_InitTypeDef USART_InitStruct = {0};
 80014f2:	2418      	movs	r4, #24
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	0018      	movs	r0, r3
 80014f8:	2320      	movs	r3, #32
 80014fa:	001a      	movs	r2, r3
 80014fc:	2100      	movs	r1, #0
 80014fe:	f000 ff3b 	bl	8002378 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	003b      	movs	r3, r7
 8001504:	0018      	movs	r0, r3
 8001506:	2318      	movs	r3, #24
 8001508:	001a      	movs	r2, r3
 800150a:	2100      	movs	r1, #0
 800150c:	f000 ff34 	bl	8002378 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff feeb 	bl	80012f0 <LL_APB1_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff fefe 	bl	800131c <LL_IOP_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fecf 	bl	80012c4 <LL_AHB1_GRP1_EnableClock>
	 * USART2 GPIO Configuration
	 *
	 * PA2   ------> USART2_TX
	 * PA3   ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2 | LL_GPIO_PIN_3;
 8001526:	003b      	movs	r3, r7
 8001528:	220c      	movs	r2, #12
 800152a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800152c:	003b      	movs	r3, r7
 800152e:	2202      	movs	r2, #2
 8001530:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001532:	003b      	movs	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001538:	003b      	movs	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800153e:	003b      	movs	r3, r7
 8001540:	2201      	movs	r2, #1
 8001542:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001544:	003b      	movs	r3, r7
 8001546:	2201      	movs	r2, #1
 8001548:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	003a      	movs	r2, r7
 800154c:	23a0      	movs	r3, #160	; 0xa0
 800154e:	05db      	lsls	r3, r3, #23
 8001550:	0011      	movs	r1, r2
 8001552:	0018      	movs	r0, r3
 8001554:	f000 fb57 	bl	8001c06 <LL_GPIO_Init>

	/* USART2 DMA Init */
	LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_USART2_RX);
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <uart_init+0x1d0>)
 800155a:	2234      	movs	r2, #52	; 0x34
 800155c:	2100      	movs	r1, #0
 800155e:	0018      	movs	r0, r3
 8001560:	f7ff fe44 	bl	80011ec <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001564:	4b55      	ldr	r3, [pc, #340]	; (80016bc <uart_init+0x1d0>)
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	0018      	movs	r0, r3
 800156c:	f7ff fcd0 	bl	8000f10 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8001570:	4b52      	ldr	r3, [pc, #328]	; (80016bc <uart_init+0x1d0>)
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff fda8 	bl	80010cc <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 800157c:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <uart_init+0x1d0>)
 800157e:	2220      	movs	r2, #32
 8001580:	2100      	movs	r1, #0
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff fcea 	bl	8000f5c <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <uart_init+0x1d0>)
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff fd08 	bl	8000fa4 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001594:	4b49      	ldr	r3, [pc, #292]	; (80016bc <uart_init+0x1d0>)
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	2100      	movs	r1, #0
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff fd26 	bl	8000fec <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80015a0:	4b46      	ldr	r3, [pc, #280]	; (80016bc <uart_init+0x1d0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff fd44 	bl	8001034 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <uart_init+0x1d0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7ff fd64 	bl	8001080 <LL_DMA_SetMemorySize>

	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE));
 80015b8:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <uart_init+0x1d4>)
 80015ba:	2101      	movs	r1, #1
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff ff81 	bl	80014c4 <LL_USART_DMA_GetRegAddr>
 80015c2:	0003      	movs	r3, r0
 80015c4:	483d      	ldr	r0, [pc, #244]	; (80016bc <uart_init+0x1d0>)
 80015c6:	001a      	movs	r2, r3
 80015c8:	2100      	movs	r1, #0
 80015ca:	f7ff fdf7 	bl	80011bc <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)usart_rx_dma_buffer);
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <uart_init+0x1d8>)
 80015d0:	483a      	ldr	r0, [pc, #232]	; (80016bc <uart_init+0x1d0>)
 80015d2:	001a      	movs	r2, r3
 80015d4:	2100      	movs	r1, #0
 80015d6:	f7ff fdd9 	bl	800118c <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, ARRAY_LEN(usart_rx_dma_buffer));
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <uart_init+0x1d0>)
 80015dc:	2218      	movs	r2, #24
 80015de:	2100      	movs	r1, #0
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff fd99 	bl	8001118 <LL_DMA_SetDataLength>

	/* Enable HT & TC interrupts */
	LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_1);
 80015e6:	4b35      	ldr	r3, [pc, #212]	; (80016bc <uart_init+0x1d0>)
 80015e8:	2100      	movs	r1, #0
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff fe4a 	bl	8001284 <LL_DMA_EnableIT_HT>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <uart_init+0x1d0>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff fe25 	bl	8001244 <LL_DMA_EnableIT_TC>

	/* DMA interrupt init */
	NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fc34 	bl	8000e6c <NVIC_EncodePriority>
 8001604:	0003      	movs	r3, r0
 8001606:	0019      	movs	r1, r3
 8001608:	2009      	movs	r0, #9
 800160a:	f7ff fbc1 	bl	8000d90 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800160e:	2009      	movs	r0, #9
 8001610:	f7ff fba4 	bl	8000d5c <__NVIC_EnableIRQ>

	/* Configure USART2 */
	USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001614:	193b      	adds	r3, r7, r4
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
	USART_InitStruct.BaudRate = 115200;
 800161a:	193b      	adds	r3, r7, r4
 800161c:	22e1      	movs	r2, #225	; 0xe1
 800161e:	0252      	lsls	r2, r2, #9
 8001620:	605a      	str	r2, [r3, #4]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001622:	0021      	movs	r1, r4
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001636:	187b      	adds	r3, r7, r1
 8001638:	220c      	movs	r2, #12
 800163a:	615a      	str	r2, [r3, #20]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800163c:	187b      	adds	r3, r7, r1
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
	LL_USART_Init(USART2, &USART_InitStruct);
 8001648:	187b      	adds	r3, r7, r1
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <uart_init+0x1d4>)
 800164c:	0019      	movs	r1, r3
 800164e:	0010      	movs	r0, r2
 8001650:	f000 fda8 	bl	80021a4 <LL_USART_Init>
	LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <uart_init+0x1d4>)
 8001656:	2100      	movs	r1, #0
 8001658:	0018      	movs	r0, r3
 800165a:	f7ff fe93 	bl	8001384 <LL_USART_SetTXFIFOThreshold>
	LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <uart_init+0x1d4>)
 8001660:	2100      	movs	r1, #0
 8001662:	0018      	movs	r0, r3
 8001664:	f7ff feb2 	bl	80013cc <LL_USART_SetRXFIFOThreshold>
	LL_USART_DisableFIFO(USART2);
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <uart_init+0x1d4>)
 800166a:	0018      	movs	r0, r3
 800166c:	f7ff fe7a 	bl	8001364 <LL_USART_DisableFIFO>
	LL_USART_ConfigAsyncMode(USART2);
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <uart_init+0x1d4>)
 8001672:	0018      	movs	r0, r3
 8001674:	f7ff fed0 	bl	8001418 <LL_USART_ConfigAsyncMode>
	LL_USART_EnableDMAReq_RX(USART2);
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <uart_init+0x1d4>)
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff ff03 	bl	8001486 <LL_USART_EnableDMAReq_RX>
	LL_USART_EnableIT_IDLE(USART2);
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <uart_init+0x1d4>)
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff fee0 	bl	8001448 <LL_USART_EnableIT_IDLE>

	/* USART interrupt */
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fbed 	bl	8000e6c <NVIC_EncodePriority>
 8001692:	0003      	movs	r3, r0
 8001694:	0019      	movs	r1, r3
 8001696:	201c      	movs	r0, #28
 8001698:	f7ff fb7a 	bl	8000d90 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 800169c:	201c      	movs	r0, #28
 800169e:	f7ff fb5d 	bl	8000d5c <__NVIC_EnableIRQ>

	/* Enable USART and DMA */
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <uart_init+0x1d0>)
 80016a4:	2100      	movs	r1, #0
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff fc12 	bl	8000ed0 <LL_DMA_EnableChannel>
	LL_USART_Enable(USART2);
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <uart_init+0x1d4>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff fe4a 	bl	8001348 <LL_USART_Enable>
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b00f      	add	sp, #60	; 0x3c
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40004400 	.word	0x40004400
 80016c4:	20000164 	.word	0x20000164

080016c8 <uart_rx_check>:
        // Запись данных в регистр передачи UART
        LL_USART_TransmitData8(USART2, data[i]);
    }
}

void uart_rx_check(void){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0

    static size_t old_pos;
    size_t pos;

    /* Calculate current position in buffer and check for new data available */
    pos = ARRAY_LEN(usart_rx_dma_buffer) - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 80016ce:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <uart_rx_check+0x108>)
 80016d0:	2100      	movs	r1, #0
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff fd42 	bl	800115c <LL_DMA_GetDataLength>
 80016d8:	0003      	movs	r3, r0
 80016da:	2218      	movs	r2, #24
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	61bb      	str	r3, [r7, #24]
    if (pos != old_pos) {                       /* Check change in received data */
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <uart_rx_check+0x10c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d06d      	beq.n	80017c6 <uart_rx_check+0xfe>

    	char string[20];
        if (pos > old_pos) {                    /* Current position is over previous one */
 80016ea:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <uart_rx_check+0x10c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d927      	bls.n	8001744 <uart_rx_check+0x7c>

            for (int i = 0; i <= pos - old_pos -1; i++) {
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e00d      	b.n	8001716 <uart_rx_check+0x4e>
            	string[i] = (char)usart_rx_dma_buffer[old_pos+i]; // Явное приведение типов
 80016fa:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <uart_rx_check+0x10c>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	18d3      	adds	r3, r2, r3
 8001702:	4a35      	ldr	r2, [pc, #212]	; (80017d8 <uart_rx_check+0x110>)
 8001704:	5cd1      	ldrb	r1, [r2, r3]
 8001706:	1d3a      	adds	r2, r7, #4
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	18d3      	adds	r3, r2, r3
 800170c:	1c0a      	adds	r2, r1, #0
 800170e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i <= pos - old_pos -1; i++) {
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	3301      	adds	r3, #1
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <uart_rx_check+0x10c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	1e5a      	subs	r2, r3, #1
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	429a      	cmp	r2, r3
 8001724:	d2e9      	bcs.n	80016fa <uart_rx_check+0x32>
            }

            string[strlen(string)] = '\0';
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	0018      	movs	r0, r3
 800172a:	f7fe fce9 	bl	8000100 <strlen>
 800172e:	0002      	movs	r2, r0
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2100      	movs	r1, #0
 8001734:	5499      	strb	r1, [r3, r2]
        	enqueue(&queue, string);
 8001736:	1d3a      	adds	r2, r7, #4
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <uart_rx_check+0x114>)
 800173a:	0011      	movs	r1, r2
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff f939 	bl	80009b4 <enqueue>
 8001742:	e03d      	b.n	80017c0 <uart_rx_check+0xf8>
            //usart_process_data(&usart_rx_dma_buffer[old_pos], pos - old_pos);
        } else {

            for (int i = 0; i <= ARRAY_LEN(usart_rx_dma_buffer) - old_pos -1; i++) {
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
 8001748:	e00d      	b.n	8001766 <uart_rx_check+0x9e>
            	string[i] = (char)usart_rx_dma_buffer[old_pos+i]; // Явное приведение типов
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <uart_rx_check+0x10c>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	18d3      	adds	r3, r2, r3
 8001752:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <uart_rx_check+0x110>)
 8001754:	5cd1      	ldrb	r1, [r2, r3]
 8001756:	1d3a      	adds	r2, r7, #4
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	18d3      	adds	r3, r2, r3
 800175c:	1c0a      	adds	r2, r1, #0
 800175e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i <= ARRAY_LEN(usart_rx_dma_buffer) - old_pos -1; i++) {
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	3301      	adds	r3, #1
 8001764:	623b      	str	r3, [r7, #32]
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <uart_rx_check+0x10c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2217      	movs	r2, #23
 800176c:	1ad2      	subs	r2, r2, r3
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	429a      	cmp	r2, r3
 8001772:	d2ea      	bcs.n	800174a <uart_rx_check+0x82>
            }


            //usart_process_data(&usart_rx_dma_buffer[old_pos], ARRAY_LEN(usart_rx_dma_buffer) - old_pos);
            if (pos > 0) {
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d014      	beq.n	80017a4 <uart_rx_check+0xdc>
                //usart_process_data(&usart_rx_dma_buffer[0], pos);

                for (int i = 0; i <= pos; i++) {
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e00d      	b.n	800179c <uart_rx_check+0xd4>
                	string[ARRAY_LEN(usart_rx_dma_buffer) - old_pos+ i] = (char)usart_rx_dma_buffer[0+i]; // Явное приведение типов
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <uart_rx_check+0x10c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	3318      	adds	r3, #24
 800178a:	4913      	ldr	r1, [pc, #76]	; (80017d8 <uart_rx_check+0x110>)
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	188a      	adds	r2, r1, r2
 8001790:	7811      	ldrb	r1, [r2, #0]
 8001792:	1d3a      	adds	r2, r7, #4
 8001794:	54d1      	strb	r1, [r2, r3]
                for (int i = 0; i <= pos; i++) {
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3301      	adds	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d2ed      	bcs.n	8001780 <uart_rx_check+0xb8>
                }
            }
            string[strlen(string)] = '\0';
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7fe fcaa 	bl	8000100 <strlen>
 80017ac:	0002      	movs	r2, r0
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2100      	movs	r1, #0
 80017b2:	5499      	strb	r1, [r3, r2]
            enqueue(&queue, string);
 80017b4:	1d3a      	adds	r2, r7, #4
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <uart_rx_check+0x114>)
 80017b8:	0011      	movs	r1, r2
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff f8fa 	bl	80009b4 <enqueue>
        }
        old_pos = pos;                          /* Save current position as old for next transfers */
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <uart_rx_check+0x10c>)
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	601a      	str	r2, [r3, #0]
    }
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b00a      	add	sp, #40	; 0x28
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40020000 	.word	0x40020000
 80017d4:	2000017c 	.word	0x2000017c
 80017d8:	20000164 	.word	0x20000164
 80017dc:	2000008c 	.word	0x2000008c

080017e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017e4:	f7ff fab4 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <LoopForever+0x6>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	; (8001820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <LoopForever+0xe>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	; (800182c <LoopForever+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800180e:	f000 fd8f 	bl	8002330 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001812:	f7ff f82b 	bl	800086c <main>

08001816 <LoopForever>:

LoopForever:
  b LoopForever
 8001816:	e7fe      	b.n	8001816 <LoopForever>
  ldr   r0, =_estack
 8001818:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001824:	08002dfc 	.word	0x08002dfc
  ldr r2, =_sbss
 8001828:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800182c:	20000194 	.word	0x20000194

08001830 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_IRQHandler>
	...

08001834 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_Init+0x3c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Init+0x3c>)
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	0049      	lsls	r1, r1, #1
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f810 	bl	8001874 <HAL_InitTick>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d003      	beq.n	8001860 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001858:	1dfb      	adds	r3, r7, #7
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
 800185e:	e001      	b.n	8001864 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff f924 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	781b      	ldrb	r3, [r3, #0]
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40022000 	.word	0x40022000

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800187c:	230f      	movs	r3, #15
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_InitTick+0x88>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d02b      	beq.n	80018e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_InitTick+0x8c>)
 800188e:	681c      	ldr	r4, [r3, #0]
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_InitTick+0x88>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	0019      	movs	r1, r3
 8001896:	23fa      	movs	r3, #250	; 0xfa
 8001898:	0098      	lsls	r0, r3, #2
 800189a:	f7fe fc43 	bl	8000124 <__udivsi3>
 800189e:	0003      	movs	r3, r0
 80018a0:	0019      	movs	r1, r3
 80018a2:	0020      	movs	r0, r4
 80018a4:	f7fe fc3e 	bl	8000124 <__udivsi3>
 80018a8:	0003      	movs	r3, r0
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 f8e5 	bl	8001a7a <HAL_SYSTICK_Config>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d112      	bne.n	80018da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d80a      	bhi.n	80018d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	2301      	movs	r3, #1
 80018be:	425b      	negs	r3, r3
 80018c0:	2200      	movs	r2, #0
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 f8c4 	bl	8001a50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_InitTick+0x90>)
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e00d      	b.n	80018ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80018d0:	230f      	movs	r3, #15
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e008      	b.n	80018ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018da:	230f      	movs	r3, #15
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e003      	b.n	80018ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018e4:	230f      	movs	r3, #15
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80018ec:	230f      	movs	r3, #15
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	781b      	ldrb	r3, [r3, #0]
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b005      	add	sp, #20
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_IncTick+0x1c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	001a      	movs	r2, r3
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_IncTick+0x20>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	18d2      	adds	r2, r2, r3
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_IncTick+0x20>)
 800191a:	601a      	str	r2, [r3, #0]
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	20000008 	.word	0x20000008
 8001928:	20000180 	.word	0x20000180

0800192c <__NVIC_SetPriority>:
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	0002      	movs	r2, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b7f      	cmp	r3, #127	; 0x7f
 8001940:	d828      	bhi.n	8001994 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001942:	4a2f      	ldr	r2, [pc, #188]	; (8001a00 <__NVIC_SetPriority+0xd4>)
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b25b      	sxtb	r3, r3
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	33c0      	adds	r3, #192	; 0xc0
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	589b      	ldr	r3, [r3, r2]
 8001952:	1dfa      	adds	r2, r7, #7
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	0011      	movs	r1, r2
 8001958:	2203      	movs	r2, #3
 800195a:	400a      	ands	r2, r1
 800195c:	00d2      	lsls	r2, r2, #3
 800195e:	21ff      	movs	r1, #255	; 0xff
 8001960:	4091      	lsls	r1, r2
 8001962:	000a      	movs	r2, r1
 8001964:	43d2      	mvns	r2, r2
 8001966:	401a      	ands	r2, r3
 8001968:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	019b      	lsls	r3, r3, #6
 800196e:	22ff      	movs	r2, #255	; 0xff
 8001970:	401a      	ands	r2, r3
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	0018      	movs	r0, r3
 8001978:	2303      	movs	r3, #3
 800197a:	4003      	ands	r3, r0
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001980:	481f      	ldr	r0, [pc, #124]	; (8001a00 <__NVIC_SetPriority+0xd4>)
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b25b      	sxtb	r3, r3
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	430a      	orrs	r2, r1
 800198c:	33c0      	adds	r3, #192	; 0xc0
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	501a      	str	r2, [r3, r0]
}
 8001992:	e031      	b.n	80019f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001994:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <__NVIC_SetPriority+0xd8>)
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	0019      	movs	r1, r3
 800199c:	230f      	movs	r3, #15
 800199e:	400b      	ands	r3, r1
 80019a0:	3b08      	subs	r3, #8
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3306      	adds	r3, #6
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	18d3      	adds	r3, r2, r3
 80019aa:	3304      	adds	r3, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	1dfa      	adds	r2, r7, #7
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	0011      	movs	r1, r2
 80019b4:	2203      	movs	r2, #3
 80019b6:	400a      	ands	r2, r1
 80019b8:	00d2      	lsls	r2, r2, #3
 80019ba:	21ff      	movs	r1, #255	; 0xff
 80019bc:	4091      	lsls	r1, r2
 80019be:	000a      	movs	r2, r1
 80019c0:	43d2      	mvns	r2, r2
 80019c2:	401a      	ands	r2, r3
 80019c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	22ff      	movs	r2, #255	; 0xff
 80019cc:	401a      	ands	r2, r3
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	0018      	movs	r0, r3
 80019d4:	2303      	movs	r3, #3
 80019d6:	4003      	ands	r3, r0
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019dc:	4809      	ldr	r0, [pc, #36]	; (8001a04 <__NVIC_SetPriority+0xd8>)
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	001c      	movs	r4, r3
 80019e4:	230f      	movs	r3, #15
 80019e6:	4023      	ands	r3, r4
 80019e8:	3b08      	subs	r3, #8
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	430a      	orrs	r2, r1
 80019ee:	3306      	adds	r3, #6
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	18c3      	adds	r3, r0, r3
 80019f4:	3304      	adds	r3, #4
 80019f6:	601a      	str	r2, [r3, #0]
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b003      	add	sp, #12
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	1e5a      	subs	r2, r3, #1
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	045b      	lsls	r3, r3, #17
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d301      	bcc.n	8001a20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e010      	b.n	8001a42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <SysTick_Config+0x44>)
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	3a01      	subs	r2, #1
 8001a26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a28:	2301      	movs	r3, #1
 8001a2a:	425b      	negs	r3, r3
 8001a2c:	2103      	movs	r1, #3
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7ff ff7c 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SysTick_Config+0x44>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SysTick_Config+0x44>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	1c02      	adds	r2, r0, #0
 8001a60:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	0011      	movs	r1, r2
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff ff5d 	bl	800192c <__NVIC_SetPriority>
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b004      	add	sp, #16
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff ffbf 	bl	8001a08 <SysTick_Config>
 8001a8a:	0003      	movs	r3, r0
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <LL_GPIO_SetPinMode>:
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	435b      	muls	r3, r3
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	0013      	movs	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	189b      	adds	r3, r3, r2
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	435b      	muls	r3, r3
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	434b      	muls	r3, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b004      	add	sp, #16
 8001aca:	bd80      	pop	{r7, pc}

08001acc <LL_GPIO_SetPinOutputType>:
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	43d2      	mvns	r2, r2
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	434b      	muls	r3, r1
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	605a      	str	r2, [r3, #4]
}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b004      	add	sp, #16
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <LL_GPIO_SetPinSpeed>:
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6899      	ldr	r1, [r3, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	435b      	muls	r3, r3
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	189b      	adds	r3, r3, r2
 8001b12:	43db      	mvns	r3, r3
 8001b14:	400b      	ands	r3, r1
 8001b16:	001a      	movs	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	435b      	muls	r3, r3
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	434b      	muls	r3, r1
 8001b20:	431a      	orrs	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	609a      	str	r2, [r3, #8]
}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <LL_GPIO_SetPinPull>:
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	68d9      	ldr	r1, [r3, #12]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	435b      	muls	r3, r3
 8001b42:	001a      	movs	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	189b      	adds	r3, r3, r2
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	001a      	movs	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	435b      	muls	r3, r3
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	434b      	muls	r3, r1
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	60da      	str	r2, [r3, #12]
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <LL_GPIO_SetAFPin_0_7>:
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a19      	ldr	r1, [r3, #32]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	435b      	muls	r3, r3
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	4353      	muls	r3, r2
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	435a      	muls	r2, r3
 8001b82:	0013      	movs	r3, r2
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	435b      	muls	r3, r3
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	434b      	muls	r3, r1
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	434b      	muls	r3, r1
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	434b      	muls	r3, r1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	621a      	str	r2, [r3, #32]
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b004      	add	sp, #16
 8001baa:	bd80      	pop	{r7, pc}

08001bac <LL_GPIO_SetAFPin_8_15>:
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	0a12      	lsrs	r2, r2, #8
 8001bc4:	4353      	muls	r3, r2
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	0a12      	lsrs	r2, r2, #8
 8001bca:	4353      	muls	r3, r2
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	0a12      	lsrs	r2, r2, #8
 8001bd0:	435a      	muls	r2, r3
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	400b      	ands	r3, r1
 8001bdc:	001a      	movs	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	0a09      	lsrs	r1, r1, #8
 8001be6:	434b      	muls	r3, r1
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	0a09      	lsrs	r1, r1, #8
 8001bec:	434b      	muls	r3, r1
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	0a09      	lsrs	r1, r1, #8
 8001bf2:	434b      	muls	r3, r1
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	434b      	muls	r3, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c14:	e047      	b.n	8001ca6 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4091      	lsls	r1, r2
 8001c20:	000a      	movs	r2, r1
 8001c22:	4013      	ands	r3, r2
 8001c24:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d039      	beq.n	8001ca0 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d003      	beq.n	8001c3c <LL_GPIO_Init+0x36>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d10d      	bne.n	8001c58 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7ff ff56 	bl	8001af6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	0018      	movs	r0, r3
 8001c54:	f7ff ff3a 	bl	8001acc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff ff64 	bl	8001b2e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d111      	bne.n	8001c92 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2bff      	cmp	r3, #255	; 0xff
 8001c72:	d807      	bhi.n	8001c84 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff ff72 	bl	8001b66 <LL_GPIO_SetAFPin_0_7>
 8001c82:	e006      	b.n	8001c92 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff ff8d 	bl	8001bac <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7ff fefa 	bl	8001a94 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	40da      	lsrs	r2, r3
 8001cae:	1e13      	subs	r3, r2, #0
 8001cb0:	d1b1      	bne.n	8001c16 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b004      	add	sp, #16
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <LL_RCC_HSI_IsReady>:
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <LL_RCC_HSI_IsReady+0x24>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	401a      	ands	r2, r3
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d101      	bne.n	8001cd6 <LL_RCC_HSI_IsReady+0x1a>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_RCC_HSI_IsReady+0x1c>
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <LL_RCC_LSE_IsReady>:
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <LL_RCC_LSE_IsReady+0x1c>)
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d101      	bne.n	8001cf8 <LL_RCC_LSE_IsReady+0x14>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_RCC_LSE_IsReady+0x16>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000

08001d04 <LL_RCC_GetSysClkSource>:
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <LL_RCC_GetSysClkSource+0x14>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2238      	movs	r2, #56	; 0x38
 8001d0e:	4013      	ands	r3, r2
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	40021000 	.word	0x40021000

08001d1c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <LL_RCC_GetAHBPrescaler+0x14>)
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	23f0      	movs	r3, #240	; 0xf0
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	4013      	ands	r3, r2
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000

08001d34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	23e0      	movs	r3, #224	; 0xe0
 8001d3e:	01db      	lsls	r3, r3, #7
 8001d40:	4013      	ands	r3, r2
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000

08001d4c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <LL_RCC_GetUSARTClockSource+0x20>)
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	4313      	orrs	r3, r2
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000

08001d70 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <LL_RCC_PLL_GetN+0x14>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	227f      	movs	r2, #127	; 0x7f
 8001d7c:	4013      	ands	r3, r2
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000

08001d88 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <LL_RCC_PLL_GetR+0x14>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0f5b      	lsrs	r3, r3, #29
 8001d92:	075b      	lsls	r3, r3, #29
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000

08001da0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <LL_RCC_PLL_GetMainSource+0x14>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2203      	movs	r2, #3
 8001daa:	4013      	ands	r3, r2
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40021000 	.word	0x40021000

08001db8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <LL_RCC_PLL_GetDivider+0x14>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2270      	movs	r2, #112	; 0x70
 8001dc2:	4013      	ands	r3, r2
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001dd8:	f000 f8a8 	bl	8001f2c <RCC_GetSystemClockFreq>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 f8ce 	bl	8001f88 <RCC_GetHCLKClockFreq>
 8001dec:	0002      	movs	r2, r0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f8de 	bl	8001fb8 <RCC_GetPCLK1ClockFreq>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	609a      	str	r2, [r3, #8]
}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b002      	add	sp, #8
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d134      	bne.n	8001e88 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff ff93 	bl	8001d4c <LL_RCC_GetUSARTClockSource>
 8001e26:	0003      	movs	r3, r0
 8001e28:	4a39      	ldr	r2, [pc, #228]	; (8001f10 <LL_RCC_GetUSARTClockFreq+0x104>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d016      	beq.n	8001e5c <LL_RCC_GetUSARTClockFreq+0x50>
 8001e2e:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <LL_RCC_GetUSARTClockFreq+0x104>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d81c      	bhi.n	8001e6e <LL_RCC_GetUSARTClockFreq+0x62>
 8001e34:	4a37      	ldr	r2, [pc, #220]	; (8001f14 <LL_RCC_GetUSARTClockFreq+0x108>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d003      	beq.n	8001e42 <LL_RCC_GetUSARTClockFreq+0x36>
 8001e3a:	4a37      	ldr	r2, [pc, #220]	; (8001f18 <LL_RCC_GetUSARTClockFreq+0x10c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d005      	beq.n	8001e4c <LL_RCC_GetUSARTClockFreq+0x40>
 8001e40:	e015      	b.n	8001e6e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001e42:	f000 f873 	bl	8001f2c <RCC_GetSystemClockFreq>
 8001e46:	0003      	movs	r3, r0
 8001e48:	60fb      	str	r3, [r7, #12]
        break;
 8001e4a:	e05c      	b.n	8001f06 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8001e4c:	f7ff ff36 	bl	8001cbc <LL_RCC_HSI_IsReady>
 8001e50:	0003      	movs	r3, r0
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d150      	bne.n	8001ef8 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 8001e56:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <LL_RCC_GetUSARTClockFreq+0x110>)
 8001e58:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e5a:	e04d      	b.n	8001ef8 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8001e5c:	f7ff ff42 	bl	8001ce4 <LL_RCC_LSE_IsReady>
 8001e60:	0003      	movs	r3, r0
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d14a      	bne.n	8001efc <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e6c:	e046      	b.n	8001efc <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001e6e:	f000 f85d 	bl	8001f2c <RCC_GetSystemClockFreq>
 8001e72:	0003      	movs	r3, r0
 8001e74:	0018      	movs	r0, r3
 8001e76:	f000 f887 	bl	8001f88 <RCC_GetHCLKClockFreq>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 f89b 	bl	8001fb8 <RCC_GetPCLK1ClockFreq>
 8001e82:	0003      	movs	r3, r0
 8001e84:	60fb      	str	r3, [r7, #12]
        break;
 8001e86:	e03e      	b.n	8001f06 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d13b      	bne.n	8001f06 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff ff5b 	bl	8001d4c <LL_RCC_GetUSARTClockSource>
 8001e96:	0003      	movs	r3, r0
 8001e98:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <LL_RCC_GetUSARTClockFreq+0x114>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d016      	beq.n	8001ecc <LL_RCC_GetUSARTClockFreq+0xc0>
 8001e9e:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <LL_RCC_GetUSARTClockFreq+0x114>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d81c      	bhi.n	8001ede <LL_RCC_GetUSARTClockFreq+0xd2>
 8001ea4:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <LL_RCC_GetUSARTClockFreq+0x118>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d003      	beq.n	8001eb2 <LL_RCC_GetUSARTClockFreq+0xa6>
 8001eaa:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d005      	beq.n	8001ebc <LL_RCC_GetUSARTClockFreq+0xb0>
 8001eb0:	e015      	b.n	8001ede <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001eb2:	f000 f83b 	bl	8001f2c <RCC_GetSystemClockFreq>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	60fb      	str	r3, [r7, #12]
        break;
 8001eba:	e024      	b.n	8001f06 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8001ebc:	f7ff fefe 	bl	8001cbc <LL_RCC_HSI_IsReady>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d11c      	bne.n	8001f00 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <LL_RCC_GetUSARTClockFreq+0x110>)
 8001ec8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001eca:	e019      	b.n	8001f00 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8001ecc:	f7ff ff0a 	bl	8001ce4 <LL_RCC_LSE_IsReady>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d116      	bne.n	8001f04 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001edc:	e012      	b.n	8001f04 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001ede:	f000 f825 	bl	8001f2c <RCC_GetSystemClockFreq>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 f84f 	bl	8001f88 <RCC_GetHCLKClockFreq>
 8001eea:	0003      	movs	r3, r0
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 f863 	bl	8001fb8 <RCC_GetPCLK1ClockFreq>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	60fb      	str	r3, [r7, #12]
        break;
 8001ef6:	e006      	b.n	8001f06 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	e004      	b.n	8001f06 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	e002      	b.n	8001f06 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	e000      	b.n	8001f06 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001f04:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b004      	add	sp, #16
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	00030003 	.word	0x00030003
 8001f14:	00030001 	.word	0x00030001
 8001f18:	00030002 	.word	0x00030002
 8001f1c:	00f42400 	.word	0x00f42400
 8001f20:	000c000c 	.word	0x000c000c
 8001f24:	000c0004 	.word	0x000c0004
 8001f28:	000c0008 	.word	0x000c0008

08001f2c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001f32:	f7ff fee7 	bl	8001d04 <LL_RCC_GetSysClkSource>
 8001f36:	0003      	movs	r3, r0
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d002      	beq.n	8001f42 <RCC_GetSystemClockFreq+0x16>
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d003      	beq.n	8001f48 <RCC_GetSystemClockFreq+0x1c>
 8001f40:	e007      	b.n	8001f52 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <RCC_GetSystemClockFreq+0x50>)
 8001f44:	607b      	str	r3, [r7, #4]
      break;
 8001f46:	e014      	b.n	8001f72 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001f48:	f000 f84c 	bl	8001fe4 <RCC_PLL_GetFreqDomain_SYS>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	607b      	str	r3, [r7, #4]
      break;
 8001f50:	e00f      	b.n	8001f72 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <RCC_GetSystemClockFreq+0x54>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	0adb      	lsrs	r3, r3, #11
 8001f58:	2207      	movs	r2, #7
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	0013      	movs	r3, r2
 8001f62:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8001f64:	6839      	ldr	r1, [r7, #0]
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <RCC_GetSystemClockFreq+0x58>)
 8001f68:	f7fe f8dc 	bl	8000124 <__udivsi3>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	607b      	str	r3, [r7, #4]
      break;
 8001f70:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001f72:	687b      	ldr	r3, [r7, #4]
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	007a1200 	.word	0x007a1200
 8001f80:	40021000 	.word	0x40021000
 8001f84:	00f42400 	.word	0x00f42400

08001f88 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001f90:	f7ff fec4 	bl	8001d1c <LL_RCC_GetAHBPrescaler>
 8001f94:	0003      	movs	r3, r0
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	220f      	movs	r2, #15
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <RCC_GetHCLKClockFreq+0x2c>)
 8001f9e:	0092      	lsls	r2, r2, #2
 8001fa0:	58d3      	ldr	r3, [r2, r3]
 8001fa2:	221f      	movs	r2, #31
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	40da      	lsrs	r2, r3
 8001faa:	0013      	movs	r3, r2
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b002      	add	sp, #8
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	08002d28 	.word	0x08002d28

08001fb8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001fc0:	f7ff feb8 	bl	8001d34 <LL_RCC_GetAPB1Prescaler>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	0b1a      	lsrs	r2, r3, #12
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <RCC_GetPCLK1ClockFreq+0x28>)
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	58d3      	ldr	r3, [r2, r3]
 8001fce:	221f      	movs	r2, #31
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	40da      	lsrs	r2, r3
 8001fd6:	0013      	movs	r3, r2
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	08002d68 	.word	0x08002d68

08001fe4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001fea:	f7ff fed9 	bl	8001da0 <LL_RCC_PLL_GetMainSource>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d003      	beq.n	8002000 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d003      	beq.n	8002006 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001ffe:	e005      	b.n	800200c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002002:	607b      	str	r3, [r7, #4]
      break;
 8002004:	e005      	b.n	8002012 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8002008:	607b      	str	r3, [r7, #4]
      break;
 800200a:	e002      	b.n	8002012 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800200e:	607b      	str	r3, [r7, #4]
      break;
 8002010:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002012:	f7ff fead 	bl	8001d70 <LL_RCC_PLL_GetN>
 8002016:	0002      	movs	r2, r0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4353      	muls	r3, r2
 800201c:	001c      	movs	r4, r3
 800201e:	f7ff fecb 	bl	8001db8 <LL_RCC_PLL_GetDivider>
 8002022:	0003      	movs	r3, r0
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	3301      	adds	r3, #1
 8002028:	0019      	movs	r1, r3
 800202a:	0020      	movs	r0, r4
 800202c:	f7fe f87a 	bl	8000124 <__udivsi3>
 8002030:	0003      	movs	r3, r0
 8002032:	001c      	movs	r4, r3
 8002034:	f7ff fea8 	bl	8001d88 <LL_RCC_PLL_GetR>
 8002038:	0003      	movs	r3, r0
 800203a:	0f5b      	lsrs	r3, r3, #29
 800203c:	3301      	adds	r3, #1
 800203e:	0019      	movs	r1, r3
 8002040:	0020      	movs	r0, r4
 8002042:	f7fe f86f 	bl	8000124 <__udivsi3>
 8002046:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b003      	add	sp, #12
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	00f42400 	.word	0x00f42400
 8002054:	007a1200 	.word	0x007a1200

08002058 <LL_USART_IsEnabled>:
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2201      	movs	r2, #1
 8002066:	4013      	ands	r3, r2
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <LL_USART_IsEnabled+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_USART_IsEnabled+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b002      	add	sp, #8
 8002078:	bd80      	pop	{r7, pc}

0800207a <LL_USART_SetPrescaler>:
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	220f      	movs	r2, #15
 800208a:	4393      	bics	r3, r2
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	b292      	uxth	r2, r2
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <LL_USART_SetStopBitsLength>:
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <LL_USART_SetStopBitsLength+0x24>)
 80020b0:	401a      	ands	r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	605a      	str	r2, [r3, #4]
}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	ffffcfff 	.word	0xffffcfff

080020c8 <LL_USART_SetHWFlowCtrl>:
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <LL_USART_SetHWFlowCtrl+0x24>)
 80020d8:	401a      	ands	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]
}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b002      	add	sp, #8
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	fffffcff 	.word	0xfffffcff

080020f0 <LL_USART_SetBaudRate>:
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0b      	cmp	r3, #11
 8002102:	d846      	bhi.n	8002192 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d043      	beq.n	8002192 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	429a      	cmp	r2, r3
 8002112:	d126      	bne.n	8002162 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	001a      	movs	r2, r3
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <LL_USART_SetBaudRate+0xac>)
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	58d3      	ldr	r3, [r2, r3]
 8002120:	0019      	movs	r1, r3
 8002122:	68b8      	ldr	r0, [r7, #8]
 8002124:	f7fd fffe 	bl	8000124 <__udivsi3>
 8002128:	0003      	movs	r3, r0
 800212a:	005a      	lsls	r2, r3, #1
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	18d3      	adds	r3, r2, r3
 8002132:	6a39      	ldr	r1, [r7, #32]
 8002134:	0018      	movs	r0, r3
 8002136:	f7fd fff5 	bl	8000124 <__udivsi3>
 800213a:	0003      	movs	r3, r0
 800213c:	b29b      	uxth	r3, r3
 800213e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <LL_USART_SetBaudRate+0xb0>)
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	b29b      	uxth	r3, r3
 800214e:	001a      	movs	r2, r3
 8002150:	2307      	movs	r3, #7
 8002152:	4013      	ands	r3, r2
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	60da      	str	r2, [r3, #12]
}
 8002160:	e017      	b.n	8002192 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	001a      	movs	r2, r3
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <LL_USART_SetBaudRate+0xac>)
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	58d3      	ldr	r3, [r2, r3]
 800216e:	0019      	movs	r1, r3
 8002170:	68b8      	ldr	r0, [r7, #8]
 8002172:	f7fd ffd7 	bl	8000124 <__udivsi3>
 8002176:	0003      	movs	r3, r0
 8002178:	001a      	movs	r2, r3
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	18d3      	adds	r3, r2, r3
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	0018      	movs	r0, r3
 8002184:	f7fd ffce 	bl	8000124 <__udivsi3>
 8002188:	0003      	movs	r3, r0
 800218a:	b29b      	uxth	r3, r3
 800218c:	001a      	movs	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	60da      	str	r2, [r3, #12]
}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	46bd      	mov	sp, r7
 8002196:	b006      	add	sp, #24
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	08002d90 	.word	0x08002d90
 80021a0:	0000fff0 	.word	0x0000fff0

080021a4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b08b      	sub	sp, #44	; 0x2c
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80021ae:	231f      	movs	r3, #31
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff ff4b 	bl	8002058 <LL_USART_IsEnabled>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d16a      	bne.n	800229c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a38      	ldr	r2, [pc, #224]	; (80022ac <LL_USART_Init+0x108>)
 80021cc:	401a      	ands	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6899      	ldr	r1, [r3, #8]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	4319      	orrs	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	4319      	orrs	r1, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	430b      	orrs	r3, r1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0011      	movs	r1, r2
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff ff54 	bl	80020a0 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0011      	movs	r1, r2
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff ff61 	bl	80020c8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <LL_USART_Init+0x10c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d105      	bne.n	800221a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800220e:	2003      	movs	r0, #3
 8002210:	f7ff fdfc 	bl	8001e0c <LL_RCC_GetUSARTClockFreq>
 8002214:	0003      	movs	r3, r0
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	e022      	b.n	8002260 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <LL_USART_Init+0x110>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d105      	bne.n	800222e <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002222:	200c      	movs	r0, #12
 8002224:	f7ff fdf2 	bl	8001e0c <LL_RCC_GetUSARTClockFreq>
 8002228:	0003      	movs	r3, r0
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	e018      	b.n	8002260 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <LL_USART_Init+0x114>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d108      	bne.n	8002248 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002236:	240c      	movs	r4, #12
 8002238:	193b      	adds	r3, r7, r4
 800223a:	0018      	movs	r0, r3
 800223c:	f7ff fdc8 	bl	8001dd0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002240:	193b      	adds	r3, r7, r4
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	e00b      	b.n	8002260 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a1c      	ldr	r2, [pc, #112]	; (80022bc <LL_USART_Init+0x118>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d107      	bne.n	8002260 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002250:	240c      	movs	r4, #12
 8002252:	193b      	adds	r3, r7, r4
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fdbb 	bl	8001dd0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800225a:	193b      	adds	r3, r7, r4
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d013      	beq.n	800228e <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00f      	beq.n	800228e <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800226e:	231f      	movs	r3, #31
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	69dc      	ldr	r4, [r3, #28]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	69b9      	ldr	r1, [r7, #24]
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	0023      	movs	r3, r4
 800228a:	f7ff ff31 	bl	80020f0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0011      	movs	r1, r2
 8002296:	0018      	movs	r0, r3
 8002298:	f7ff feef 	bl	800207a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800229c:	231f      	movs	r3, #31
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b009      	add	sp, #36	; 0x24
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	efff69f3 	.word	0xefff69f3
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40004400 	.word	0x40004400
 80022b8:	40004800 	.word	0x40004800
 80022bc:	40004c00 	.word	0x40004c00

080022c0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <LL_mDelay+0x44>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80022ce:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3301      	adds	r3, #1
 80022d8:	d00c      	beq.n	80022f4 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3301      	adds	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 80022e0:	e008      	b.n	80022f4 <LL_mDelay+0x34>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <LL_mDelay+0x44>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	025b      	lsls	r3, r3, #9
 80022ea:	4013      	ands	r3, r2
 80022ec:	d002      	beq.n	80022f4 <LL_mDelay+0x34>
    {
      tmpDelay --;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f3      	bne.n	80022e2 <LL_mDelay+0x22>
    }
  }
}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b004      	add	sp, #16
 8002302:	bd80      	pop	{r7, pc}
 8002304:	e000e010 	.word	0xe000e010

08002308 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <LL_SetSystemCoreClock+0x18>)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b002      	add	sp, #8
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	20000000 	.word	0x20000000

08002324 <__errno>:
 8002324:	4b01      	ldr	r3, [pc, #4]	; (800232c <__errno+0x8>)
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	4770      	bx	lr
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	2000000c 	.word	0x2000000c

08002330 <__libc_init_array>:
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	2600      	movs	r6, #0
 8002334:	4d0c      	ldr	r5, [pc, #48]	; (8002368 <__libc_init_array+0x38>)
 8002336:	4c0d      	ldr	r4, [pc, #52]	; (800236c <__libc_init_array+0x3c>)
 8002338:	1b64      	subs	r4, r4, r5
 800233a:	10a4      	asrs	r4, r4, #2
 800233c:	42a6      	cmp	r6, r4
 800233e:	d109      	bne.n	8002354 <__libc_init_array+0x24>
 8002340:	2600      	movs	r6, #0
 8002342:	f000 fca1 	bl	8002c88 <_init>
 8002346:	4d0a      	ldr	r5, [pc, #40]	; (8002370 <__libc_init_array+0x40>)
 8002348:	4c0a      	ldr	r4, [pc, #40]	; (8002374 <__libc_init_array+0x44>)
 800234a:	1b64      	subs	r4, r4, r5
 800234c:	10a4      	asrs	r4, r4, #2
 800234e:	42a6      	cmp	r6, r4
 8002350:	d105      	bne.n	800235e <__libc_init_array+0x2e>
 8002352:	bd70      	pop	{r4, r5, r6, pc}
 8002354:	00b3      	lsls	r3, r6, #2
 8002356:	58eb      	ldr	r3, [r5, r3]
 8002358:	4798      	blx	r3
 800235a:	3601      	adds	r6, #1
 800235c:	e7ee      	b.n	800233c <__libc_init_array+0xc>
 800235e:	00b3      	lsls	r3, r6, #2
 8002360:	58eb      	ldr	r3, [r5, r3]
 8002362:	4798      	blx	r3
 8002364:	3601      	adds	r6, #1
 8002366:	e7f2      	b.n	800234e <__libc_init_array+0x1e>
 8002368:	08002df4 	.word	0x08002df4
 800236c:	08002df4 	.word	0x08002df4
 8002370:	08002df4 	.word	0x08002df4
 8002374:	08002df8 	.word	0x08002df8

08002378 <memset>:
 8002378:	0003      	movs	r3, r0
 800237a:	1882      	adds	r2, r0, r2
 800237c:	4293      	cmp	r3, r2
 800237e:	d100      	bne.n	8002382 <memset+0xa>
 8002380:	4770      	bx	lr
 8002382:	7019      	strb	r1, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	e7f9      	b.n	800237c <memset+0x4>

08002388 <strncpy>:
 8002388:	0003      	movs	r3, r0
 800238a:	b530      	push	{r4, r5, lr}
 800238c:	001d      	movs	r5, r3
 800238e:	2a00      	cmp	r2, #0
 8002390:	d006      	beq.n	80023a0 <strncpy+0x18>
 8002392:	780c      	ldrb	r4, [r1, #0]
 8002394:	3a01      	subs	r2, #1
 8002396:	3301      	adds	r3, #1
 8002398:	702c      	strb	r4, [r5, #0]
 800239a:	3101      	adds	r1, #1
 800239c:	2c00      	cmp	r4, #0
 800239e:	d1f5      	bne.n	800238c <strncpy+0x4>
 80023a0:	2100      	movs	r1, #0
 80023a2:	189a      	adds	r2, r3, r2
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d100      	bne.n	80023aa <strncpy+0x22>
 80023a8:	bd30      	pop	{r4, r5, pc}
 80023aa:	7019      	strb	r1, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	e7f9      	b.n	80023a4 <strncpy+0x1c>

080023b0 <_vsiprintf_r>:
 80023b0:	b500      	push	{lr}
 80023b2:	b09b      	sub	sp, #108	; 0x6c
 80023b4:	9100      	str	r1, [sp, #0]
 80023b6:	9104      	str	r1, [sp, #16]
 80023b8:	4906      	ldr	r1, [pc, #24]	; (80023d4 <_vsiprintf_r+0x24>)
 80023ba:	9105      	str	r1, [sp, #20]
 80023bc:	9102      	str	r1, [sp, #8]
 80023be:	4906      	ldr	r1, [pc, #24]	; (80023d8 <_vsiprintf_r+0x28>)
 80023c0:	9103      	str	r1, [sp, #12]
 80023c2:	4669      	mov	r1, sp
 80023c4:	f000 f878 	bl	80024b8 <_svfiprintf_r>
 80023c8:	2300      	movs	r3, #0
 80023ca:	9a00      	ldr	r2, [sp, #0]
 80023cc:	7013      	strb	r3, [r2, #0]
 80023ce:	b01b      	add	sp, #108	; 0x6c
 80023d0:	bd00      	pop	{pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	7fffffff 	.word	0x7fffffff
 80023d8:	ffff0208 	.word	0xffff0208

080023dc <vsiprintf>:
 80023dc:	b510      	push	{r4, lr}
 80023de:	0013      	movs	r3, r2
 80023e0:	000a      	movs	r2, r1
 80023e2:	0001      	movs	r1, r0
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <vsiprintf+0x14>)
 80023e6:	6800      	ldr	r0, [r0, #0]
 80023e8:	f7ff ffe2 	bl	80023b0 <_vsiprintf_r>
 80023ec:	bd10      	pop	{r4, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	2000000c 	.word	0x2000000c

080023f4 <__ssputs_r>:
 80023f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f6:	688e      	ldr	r6, [r1, #8]
 80023f8:	b085      	sub	sp, #20
 80023fa:	0007      	movs	r7, r0
 80023fc:	000c      	movs	r4, r1
 80023fe:	9203      	str	r2, [sp, #12]
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	429e      	cmp	r6, r3
 8002404:	d83c      	bhi.n	8002480 <__ssputs_r+0x8c>
 8002406:	2390      	movs	r3, #144	; 0x90
 8002408:	898a      	ldrh	r2, [r1, #12]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	421a      	tst	r2, r3
 800240e:	d034      	beq.n	800247a <__ssputs_r+0x86>
 8002410:	6909      	ldr	r1, [r1, #16]
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	6960      	ldr	r0, [r4, #20]
 8002416:	1a5b      	subs	r3, r3, r1
 8002418:	9302      	str	r3, [sp, #8]
 800241a:	2303      	movs	r3, #3
 800241c:	4343      	muls	r3, r0
 800241e:	0fdd      	lsrs	r5, r3, #31
 8002420:	18ed      	adds	r5, r5, r3
 8002422:	9b01      	ldr	r3, [sp, #4]
 8002424:	9802      	ldr	r0, [sp, #8]
 8002426:	3301      	adds	r3, #1
 8002428:	181b      	adds	r3, r3, r0
 800242a:	106d      	asrs	r5, r5, #1
 800242c:	42ab      	cmp	r3, r5
 800242e:	d900      	bls.n	8002432 <__ssputs_r+0x3e>
 8002430:	001d      	movs	r5, r3
 8002432:	0553      	lsls	r3, r2, #21
 8002434:	d532      	bpl.n	800249c <__ssputs_r+0xa8>
 8002436:	0029      	movs	r1, r5
 8002438:	0038      	movs	r0, r7
 800243a:	f000 fb53 	bl	8002ae4 <_malloc_r>
 800243e:	1e06      	subs	r6, r0, #0
 8002440:	d109      	bne.n	8002456 <__ssputs_r+0x62>
 8002442:	230c      	movs	r3, #12
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	2340      	movs	r3, #64	; 0x40
 8002448:	2001      	movs	r0, #1
 800244a:	89a2      	ldrh	r2, [r4, #12]
 800244c:	4240      	negs	r0, r0
 800244e:	4313      	orrs	r3, r2
 8002450:	81a3      	strh	r3, [r4, #12]
 8002452:	b005      	add	sp, #20
 8002454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002456:	9a02      	ldr	r2, [sp, #8]
 8002458:	6921      	ldr	r1, [r4, #16]
 800245a:	f000 faba 	bl	80029d2 <memcpy>
 800245e:	89a3      	ldrh	r3, [r4, #12]
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <__ssputs_r+0xc0>)
 8002462:	401a      	ands	r2, r3
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	4313      	orrs	r3, r2
 8002468:	81a3      	strh	r3, [r4, #12]
 800246a:	9b02      	ldr	r3, [sp, #8]
 800246c:	6126      	str	r6, [r4, #16]
 800246e:	18f6      	adds	r6, r6, r3
 8002470:	6026      	str	r6, [r4, #0]
 8002472:	6165      	str	r5, [r4, #20]
 8002474:	9e01      	ldr	r6, [sp, #4]
 8002476:	1aed      	subs	r5, r5, r3
 8002478:	60a5      	str	r5, [r4, #8]
 800247a:	9b01      	ldr	r3, [sp, #4]
 800247c:	429e      	cmp	r6, r3
 800247e:	d900      	bls.n	8002482 <__ssputs_r+0x8e>
 8002480:	9e01      	ldr	r6, [sp, #4]
 8002482:	0032      	movs	r2, r6
 8002484:	9903      	ldr	r1, [sp, #12]
 8002486:	6820      	ldr	r0, [r4, #0]
 8002488:	f000 faac 	bl	80029e4 <memmove>
 800248c:	68a3      	ldr	r3, [r4, #8]
 800248e:	2000      	movs	r0, #0
 8002490:	1b9b      	subs	r3, r3, r6
 8002492:	60a3      	str	r3, [r4, #8]
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	199e      	adds	r6, r3, r6
 8002498:	6026      	str	r6, [r4, #0]
 800249a:	e7da      	b.n	8002452 <__ssputs_r+0x5e>
 800249c:	002a      	movs	r2, r5
 800249e:	0038      	movs	r0, r7
 80024a0:	f000 fb96 	bl	8002bd0 <_realloc_r>
 80024a4:	1e06      	subs	r6, r0, #0
 80024a6:	d1e0      	bne.n	800246a <__ssputs_r+0x76>
 80024a8:	0038      	movs	r0, r7
 80024aa:	6921      	ldr	r1, [r4, #16]
 80024ac:	f000 faae 	bl	8002a0c <_free_r>
 80024b0:	e7c7      	b.n	8002442 <__ssputs_r+0x4e>
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	fffffb7f 	.word	0xfffffb7f

080024b8 <_svfiprintf_r>:
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ba:	b0a1      	sub	sp, #132	; 0x84
 80024bc:	9003      	str	r0, [sp, #12]
 80024be:	001d      	movs	r5, r3
 80024c0:	898b      	ldrh	r3, [r1, #12]
 80024c2:	000f      	movs	r7, r1
 80024c4:	0016      	movs	r6, r2
 80024c6:	061b      	lsls	r3, r3, #24
 80024c8:	d511      	bpl.n	80024ee <_svfiprintf_r+0x36>
 80024ca:	690b      	ldr	r3, [r1, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10e      	bne.n	80024ee <_svfiprintf_r+0x36>
 80024d0:	2140      	movs	r1, #64	; 0x40
 80024d2:	f000 fb07 	bl	8002ae4 <_malloc_r>
 80024d6:	6038      	str	r0, [r7, #0]
 80024d8:	6138      	str	r0, [r7, #16]
 80024da:	2800      	cmp	r0, #0
 80024dc:	d105      	bne.n	80024ea <_svfiprintf_r+0x32>
 80024de:	230c      	movs	r3, #12
 80024e0:	9a03      	ldr	r2, [sp, #12]
 80024e2:	3801      	subs	r0, #1
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	b021      	add	sp, #132	; 0x84
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	2340      	movs	r3, #64	; 0x40
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	2300      	movs	r3, #0
 80024f0:	ac08      	add	r4, sp, #32
 80024f2:	6163      	str	r3, [r4, #20]
 80024f4:	3320      	adds	r3, #32
 80024f6:	7663      	strb	r3, [r4, #25]
 80024f8:	3310      	adds	r3, #16
 80024fa:	76a3      	strb	r3, [r4, #26]
 80024fc:	9507      	str	r5, [sp, #28]
 80024fe:	0035      	movs	r5, r6
 8002500:	782b      	ldrb	r3, [r5, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <_svfiprintf_r+0x52>
 8002506:	2b25      	cmp	r3, #37	; 0x25
 8002508:	d147      	bne.n	800259a <_svfiprintf_r+0xe2>
 800250a:	1bab      	subs	r3, r5, r6
 800250c:	9305      	str	r3, [sp, #20]
 800250e:	42b5      	cmp	r5, r6
 8002510:	d00c      	beq.n	800252c <_svfiprintf_r+0x74>
 8002512:	0032      	movs	r2, r6
 8002514:	0039      	movs	r1, r7
 8002516:	9803      	ldr	r0, [sp, #12]
 8002518:	f7ff ff6c 	bl	80023f4 <__ssputs_r>
 800251c:	1c43      	adds	r3, r0, #1
 800251e:	d100      	bne.n	8002522 <_svfiprintf_r+0x6a>
 8002520:	e0ae      	b.n	8002680 <_svfiprintf_r+0x1c8>
 8002522:	6962      	ldr	r2, [r4, #20]
 8002524:	9b05      	ldr	r3, [sp, #20]
 8002526:	4694      	mov	ip, r2
 8002528:	4463      	add	r3, ip
 800252a:	6163      	str	r3, [r4, #20]
 800252c:	782b      	ldrb	r3, [r5, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d100      	bne.n	8002534 <_svfiprintf_r+0x7c>
 8002532:	e0a5      	b.n	8002680 <_svfiprintf_r+0x1c8>
 8002534:	2201      	movs	r2, #1
 8002536:	2300      	movs	r3, #0
 8002538:	4252      	negs	r2, r2
 800253a:	6062      	str	r2, [r4, #4]
 800253c:	a904      	add	r1, sp, #16
 800253e:	3254      	adds	r2, #84	; 0x54
 8002540:	1852      	adds	r2, r2, r1
 8002542:	1c6e      	adds	r6, r5, #1
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	60e3      	str	r3, [r4, #12]
 8002548:	60a3      	str	r3, [r4, #8]
 800254a:	7013      	strb	r3, [r2, #0]
 800254c:	65a3      	str	r3, [r4, #88]	; 0x58
 800254e:	2205      	movs	r2, #5
 8002550:	7831      	ldrb	r1, [r6, #0]
 8002552:	4854      	ldr	r0, [pc, #336]	; (80026a4 <_svfiprintf_r+0x1ec>)
 8002554:	f000 fa32 	bl	80029bc <memchr>
 8002558:	1c75      	adds	r5, r6, #1
 800255a:	2800      	cmp	r0, #0
 800255c:	d11f      	bne.n	800259e <_svfiprintf_r+0xe6>
 800255e:	6822      	ldr	r2, [r4, #0]
 8002560:	06d3      	lsls	r3, r2, #27
 8002562:	d504      	bpl.n	800256e <_svfiprintf_r+0xb6>
 8002564:	2353      	movs	r3, #83	; 0x53
 8002566:	a904      	add	r1, sp, #16
 8002568:	185b      	adds	r3, r3, r1
 800256a:	2120      	movs	r1, #32
 800256c:	7019      	strb	r1, [r3, #0]
 800256e:	0713      	lsls	r3, r2, #28
 8002570:	d504      	bpl.n	800257c <_svfiprintf_r+0xc4>
 8002572:	2353      	movs	r3, #83	; 0x53
 8002574:	a904      	add	r1, sp, #16
 8002576:	185b      	adds	r3, r3, r1
 8002578:	212b      	movs	r1, #43	; 0x2b
 800257a:	7019      	strb	r1, [r3, #0]
 800257c:	7833      	ldrb	r3, [r6, #0]
 800257e:	2b2a      	cmp	r3, #42	; 0x2a
 8002580:	d016      	beq.n	80025b0 <_svfiprintf_r+0xf8>
 8002582:	0035      	movs	r5, r6
 8002584:	2100      	movs	r1, #0
 8002586:	200a      	movs	r0, #10
 8002588:	68e3      	ldr	r3, [r4, #12]
 800258a:	782a      	ldrb	r2, [r5, #0]
 800258c:	1c6e      	adds	r6, r5, #1
 800258e:	3a30      	subs	r2, #48	; 0x30
 8002590:	2a09      	cmp	r2, #9
 8002592:	d94e      	bls.n	8002632 <_svfiprintf_r+0x17a>
 8002594:	2900      	cmp	r1, #0
 8002596:	d111      	bne.n	80025bc <_svfiprintf_r+0x104>
 8002598:	e017      	b.n	80025ca <_svfiprintf_r+0x112>
 800259a:	3501      	adds	r5, #1
 800259c:	e7b0      	b.n	8002500 <_svfiprintf_r+0x48>
 800259e:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <_svfiprintf_r+0x1ec>)
 80025a0:	6822      	ldr	r2, [r4, #0]
 80025a2:	1ac0      	subs	r0, r0, r3
 80025a4:	2301      	movs	r3, #1
 80025a6:	4083      	lsls	r3, r0
 80025a8:	4313      	orrs	r3, r2
 80025aa:	002e      	movs	r6, r5
 80025ac:	6023      	str	r3, [r4, #0]
 80025ae:	e7ce      	b.n	800254e <_svfiprintf_r+0x96>
 80025b0:	9b07      	ldr	r3, [sp, #28]
 80025b2:	1d19      	adds	r1, r3, #4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	9107      	str	r1, [sp, #28]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db01      	blt.n	80025c0 <_svfiprintf_r+0x108>
 80025bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80025be:	e004      	b.n	80025ca <_svfiprintf_r+0x112>
 80025c0:	425b      	negs	r3, r3
 80025c2:	60e3      	str	r3, [r4, #12]
 80025c4:	2302      	movs	r3, #2
 80025c6:	4313      	orrs	r3, r2
 80025c8:	6023      	str	r3, [r4, #0]
 80025ca:	782b      	ldrb	r3, [r5, #0]
 80025cc:	2b2e      	cmp	r3, #46	; 0x2e
 80025ce:	d10a      	bne.n	80025e6 <_svfiprintf_r+0x12e>
 80025d0:	786b      	ldrb	r3, [r5, #1]
 80025d2:	2b2a      	cmp	r3, #42	; 0x2a
 80025d4:	d135      	bne.n	8002642 <_svfiprintf_r+0x18a>
 80025d6:	9b07      	ldr	r3, [sp, #28]
 80025d8:	3502      	adds	r5, #2
 80025da:	1d1a      	adds	r2, r3, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	9207      	str	r2, [sp, #28]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db2b      	blt.n	800263c <_svfiprintf_r+0x184>
 80025e4:	9309      	str	r3, [sp, #36]	; 0x24
 80025e6:	4e30      	ldr	r6, [pc, #192]	; (80026a8 <_svfiprintf_r+0x1f0>)
 80025e8:	2203      	movs	r2, #3
 80025ea:	0030      	movs	r0, r6
 80025ec:	7829      	ldrb	r1, [r5, #0]
 80025ee:	f000 f9e5 	bl	80029bc <memchr>
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d006      	beq.n	8002604 <_svfiprintf_r+0x14c>
 80025f6:	2340      	movs	r3, #64	; 0x40
 80025f8:	1b80      	subs	r0, r0, r6
 80025fa:	4083      	lsls	r3, r0
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	3501      	adds	r5, #1
 8002600:	4313      	orrs	r3, r2
 8002602:	6023      	str	r3, [r4, #0]
 8002604:	7829      	ldrb	r1, [r5, #0]
 8002606:	2206      	movs	r2, #6
 8002608:	4828      	ldr	r0, [pc, #160]	; (80026ac <_svfiprintf_r+0x1f4>)
 800260a:	1c6e      	adds	r6, r5, #1
 800260c:	7621      	strb	r1, [r4, #24]
 800260e:	f000 f9d5 	bl	80029bc <memchr>
 8002612:	2800      	cmp	r0, #0
 8002614:	d03c      	beq.n	8002690 <_svfiprintf_r+0x1d8>
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <_svfiprintf_r+0x1f8>)
 8002618:	2b00      	cmp	r3, #0
 800261a:	d125      	bne.n	8002668 <_svfiprintf_r+0x1b0>
 800261c:	2207      	movs	r2, #7
 800261e:	9b07      	ldr	r3, [sp, #28]
 8002620:	3307      	adds	r3, #7
 8002622:	4393      	bics	r3, r2
 8002624:	3308      	adds	r3, #8
 8002626:	9307      	str	r3, [sp, #28]
 8002628:	6963      	ldr	r3, [r4, #20]
 800262a:	9a04      	ldr	r2, [sp, #16]
 800262c:	189b      	adds	r3, r3, r2
 800262e:	6163      	str	r3, [r4, #20]
 8002630:	e765      	b.n	80024fe <_svfiprintf_r+0x46>
 8002632:	4343      	muls	r3, r0
 8002634:	0035      	movs	r5, r6
 8002636:	2101      	movs	r1, #1
 8002638:	189b      	adds	r3, r3, r2
 800263a:	e7a6      	b.n	800258a <_svfiprintf_r+0xd2>
 800263c:	2301      	movs	r3, #1
 800263e:	425b      	negs	r3, r3
 8002640:	e7d0      	b.n	80025e4 <_svfiprintf_r+0x12c>
 8002642:	2300      	movs	r3, #0
 8002644:	200a      	movs	r0, #10
 8002646:	001a      	movs	r2, r3
 8002648:	3501      	adds	r5, #1
 800264a:	6063      	str	r3, [r4, #4]
 800264c:	7829      	ldrb	r1, [r5, #0]
 800264e:	1c6e      	adds	r6, r5, #1
 8002650:	3930      	subs	r1, #48	; 0x30
 8002652:	2909      	cmp	r1, #9
 8002654:	d903      	bls.n	800265e <_svfiprintf_r+0x1a6>
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0c5      	beq.n	80025e6 <_svfiprintf_r+0x12e>
 800265a:	9209      	str	r2, [sp, #36]	; 0x24
 800265c:	e7c3      	b.n	80025e6 <_svfiprintf_r+0x12e>
 800265e:	4342      	muls	r2, r0
 8002660:	0035      	movs	r5, r6
 8002662:	2301      	movs	r3, #1
 8002664:	1852      	adds	r2, r2, r1
 8002666:	e7f1      	b.n	800264c <_svfiprintf_r+0x194>
 8002668:	ab07      	add	r3, sp, #28
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	003a      	movs	r2, r7
 800266e:	0021      	movs	r1, r4
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <_svfiprintf_r+0x1fc>)
 8002672:	9803      	ldr	r0, [sp, #12]
 8002674:	e000      	b.n	8002678 <_svfiprintf_r+0x1c0>
 8002676:	bf00      	nop
 8002678:	9004      	str	r0, [sp, #16]
 800267a:	9b04      	ldr	r3, [sp, #16]
 800267c:	3301      	adds	r3, #1
 800267e:	d1d3      	bne.n	8002628 <_svfiprintf_r+0x170>
 8002680:	89bb      	ldrh	r3, [r7, #12]
 8002682:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002684:	065b      	lsls	r3, r3, #25
 8002686:	d400      	bmi.n	800268a <_svfiprintf_r+0x1d2>
 8002688:	e72d      	b.n	80024e6 <_svfiprintf_r+0x2e>
 800268a:	2001      	movs	r0, #1
 800268c:	4240      	negs	r0, r0
 800268e:	e72a      	b.n	80024e6 <_svfiprintf_r+0x2e>
 8002690:	ab07      	add	r3, sp, #28
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	003a      	movs	r2, r7
 8002696:	0021      	movs	r1, r4
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <_svfiprintf_r+0x1fc>)
 800269a:	9803      	ldr	r0, [sp, #12]
 800269c:	f000 f87c 	bl	8002798 <_printf_i>
 80026a0:	e7ea      	b.n	8002678 <_svfiprintf_r+0x1c0>
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	08002dc0 	.word	0x08002dc0
 80026a8:	08002dc6 	.word	0x08002dc6
 80026ac:	08002dca 	.word	0x08002dca
 80026b0:	00000000 	.word	0x00000000
 80026b4:	080023f5 	.word	0x080023f5

080026b8 <_printf_common>:
 80026b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026ba:	0015      	movs	r5, r2
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	688a      	ldr	r2, [r1, #8]
 80026c0:	690b      	ldr	r3, [r1, #16]
 80026c2:	000c      	movs	r4, r1
 80026c4:	9000      	str	r0, [sp, #0]
 80026c6:	4293      	cmp	r3, r2
 80026c8:	da00      	bge.n	80026cc <_printf_common+0x14>
 80026ca:	0013      	movs	r3, r2
 80026cc:	0022      	movs	r2, r4
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	3243      	adds	r2, #67	; 0x43
 80026d2:	7812      	ldrb	r2, [r2, #0]
 80026d4:	2a00      	cmp	r2, #0
 80026d6:	d001      	beq.n	80026dc <_printf_common+0x24>
 80026d8:	3301      	adds	r3, #1
 80026da:	602b      	str	r3, [r5, #0]
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	069b      	lsls	r3, r3, #26
 80026e0:	d502      	bpl.n	80026e8 <_printf_common+0x30>
 80026e2:	682b      	ldr	r3, [r5, #0]
 80026e4:	3302      	adds	r3, #2
 80026e6:	602b      	str	r3, [r5, #0]
 80026e8:	6822      	ldr	r2, [r4, #0]
 80026ea:	2306      	movs	r3, #6
 80026ec:	0017      	movs	r7, r2
 80026ee:	401f      	ands	r7, r3
 80026f0:	421a      	tst	r2, r3
 80026f2:	d027      	beq.n	8002744 <_printf_common+0x8c>
 80026f4:	0023      	movs	r3, r4
 80026f6:	3343      	adds	r3, #67	; 0x43
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	1e5a      	subs	r2, r3, #1
 80026fc:	4193      	sbcs	r3, r2
 80026fe:	6822      	ldr	r2, [r4, #0]
 8002700:	0692      	lsls	r2, r2, #26
 8002702:	d430      	bmi.n	8002766 <_printf_common+0xae>
 8002704:	0022      	movs	r2, r4
 8002706:	9901      	ldr	r1, [sp, #4]
 8002708:	9800      	ldr	r0, [sp, #0]
 800270a:	9e08      	ldr	r6, [sp, #32]
 800270c:	3243      	adds	r2, #67	; 0x43
 800270e:	47b0      	blx	r6
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d025      	beq.n	8002760 <_printf_common+0xa8>
 8002714:	2306      	movs	r3, #6
 8002716:	6820      	ldr	r0, [r4, #0]
 8002718:	682a      	ldr	r2, [r5, #0]
 800271a:	68e1      	ldr	r1, [r4, #12]
 800271c:	2500      	movs	r5, #0
 800271e:	4003      	ands	r3, r0
 8002720:	2b04      	cmp	r3, #4
 8002722:	d103      	bne.n	800272c <_printf_common+0x74>
 8002724:	1a8d      	subs	r5, r1, r2
 8002726:	43eb      	mvns	r3, r5
 8002728:	17db      	asrs	r3, r3, #31
 800272a:	401d      	ands	r5, r3
 800272c:	68a3      	ldr	r3, [r4, #8]
 800272e:	6922      	ldr	r2, [r4, #16]
 8002730:	4293      	cmp	r3, r2
 8002732:	dd01      	ble.n	8002738 <_printf_common+0x80>
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	18ed      	adds	r5, r5, r3
 8002738:	2700      	movs	r7, #0
 800273a:	42bd      	cmp	r5, r7
 800273c:	d120      	bne.n	8002780 <_printf_common+0xc8>
 800273e:	2000      	movs	r0, #0
 8002740:	e010      	b.n	8002764 <_printf_common+0xac>
 8002742:	3701      	adds	r7, #1
 8002744:	68e3      	ldr	r3, [r4, #12]
 8002746:	682a      	ldr	r2, [r5, #0]
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	42bb      	cmp	r3, r7
 800274c:	ddd2      	ble.n	80026f4 <_printf_common+0x3c>
 800274e:	0022      	movs	r2, r4
 8002750:	2301      	movs	r3, #1
 8002752:	9901      	ldr	r1, [sp, #4]
 8002754:	9800      	ldr	r0, [sp, #0]
 8002756:	9e08      	ldr	r6, [sp, #32]
 8002758:	3219      	adds	r2, #25
 800275a:	47b0      	blx	r6
 800275c:	1c43      	adds	r3, r0, #1
 800275e:	d1f0      	bne.n	8002742 <_printf_common+0x8a>
 8002760:	2001      	movs	r0, #1
 8002762:	4240      	negs	r0, r0
 8002764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002766:	2030      	movs	r0, #48	; 0x30
 8002768:	18e1      	adds	r1, r4, r3
 800276a:	3143      	adds	r1, #67	; 0x43
 800276c:	7008      	strb	r0, [r1, #0]
 800276e:	0021      	movs	r1, r4
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	3145      	adds	r1, #69	; 0x45
 8002774:	7809      	ldrb	r1, [r1, #0]
 8002776:	18a2      	adds	r2, r4, r2
 8002778:	3243      	adds	r2, #67	; 0x43
 800277a:	3302      	adds	r3, #2
 800277c:	7011      	strb	r1, [r2, #0]
 800277e:	e7c1      	b.n	8002704 <_printf_common+0x4c>
 8002780:	0022      	movs	r2, r4
 8002782:	2301      	movs	r3, #1
 8002784:	9901      	ldr	r1, [sp, #4]
 8002786:	9800      	ldr	r0, [sp, #0]
 8002788:	9e08      	ldr	r6, [sp, #32]
 800278a:	321a      	adds	r2, #26
 800278c:	47b0      	blx	r6
 800278e:	1c43      	adds	r3, r0, #1
 8002790:	d0e6      	beq.n	8002760 <_printf_common+0xa8>
 8002792:	3701      	adds	r7, #1
 8002794:	e7d1      	b.n	800273a <_printf_common+0x82>
	...

08002798 <_printf_i>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	b08b      	sub	sp, #44	; 0x2c
 800279c:	9206      	str	r2, [sp, #24]
 800279e:	000a      	movs	r2, r1
 80027a0:	3243      	adds	r2, #67	; 0x43
 80027a2:	9307      	str	r3, [sp, #28]
 80027a4:	9005      	str	r0, [sp, #20]
 80027a6:	9204      	str	r2, [sp, #16]
 80027a8:	7e0a      	ldrb	r2, [r1, #24]
 80027aa:	000c      	movs	r4, r1
 80027ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80027ae:	2a78      	cmp	r2, #120	; 0x78
 80027b0:	d807      	bhi.n	80027c2 <_printf_i+0x2a>
 80027b2:	2a62      	cmp	r2, #98	; 0x62
 80027b4:	d809      	bhi.n	80027ca <_printf_i+0x32>
 80027b6:	2a00      	cmp	r2, #0
 80027b8:	d100      	bne.n	80027bc <_printf_i+0x24>
 80027ba:	e0c1      	b.n	8002940 <_printf_i+0x1a8>
 80027bc:	2a58      	cmp	r2, #88	; 0x58
 80027be:	d100      	bne.n	80027c2 <_printf_i+0x2a>
 80027c0:	e08c      	b.n	80028dc <_printf_i+0x144>
 80027c2:	0026      	movs	r6, r4
 80027c4:	3642      	adds	r6, #66	; 0x42
 80027c6:	7032      	strb	r2, [r6, #0]
 80027c8:	e022      	b.n	8002810 <_printf_i+0x78>
 80027ca:	0010      	movs	r0, r2
 80027cc:	3863      	subs	r0, #99	; 0x63
 80027ce:	2815      	cmp	r0, #21
 80027d0:	d8f7      	bhi.n	80027c2 <_printf_i+0x2a>
 80027d2:	f7fd fc9d 	bl	8000110 <__gnu_thumb1_case_shi>
 80027d6:	0016      	.short	0x0016
 80027d8:	fff6001f 	.word	0xfff6001f
 80027dc:	fff6fff6 	.word	0xfff6fff6
 80027e0:	001ffff6 	.word	0x001ffff6
 80027e4:	fff6fff6 	.word	0xfff6fff6
 80027e8:	fff6fff6 	.word	0xfff6fff6
 80027ec:	003600a8 	.word	0x003600a8
 80027f0:	fff6009a 	.word	0xfff6009a
 80027f4:	00b9fff6 	.word	0x00b9fff6
 80027f8:	0036fff6 	.word	0x0036fff6
 80027fc:	fff6fff6 	.word	0xfff6fff6
 8002800:	009e      	.short	0x009e
 8002802:	0026      	movs	r6, r4
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	3642      	adds	r6, #66	; 0x42
 8002808:	1d11      	adds	r1, r2, #4
 800280a:	6019      	str	r1, [r3, #0]
 800280c:	6813      	ldr	r3, [r2, #0]
 800280e:	7033      	strb	r3, [r6, #0]
 8002810:	2301      	movs	r3, #1
 8002812:	e0a7      	b.n	8002964 <_printf_i+0x1cc>
 8002814:	6808      	ldr	r0, [r1, #0]
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	1d0a      	adds	r2, r1, #4
 800281a:	0605      	lsls	r5, r0, #24
 800281c:	d50b      	bpl.n	8002836 <_printf_i+0x9e>
 800281e:	680d      	ldr	r5, [r1, #0]
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	2d00      	cmp	r5, #0
 8002824:	da03      	bge.n	800282e <_printf_i+0x96>
 8002826:	232d      	movs	r3, #45	; 0x2d
 8002828:	9a04      	ldr	r2, [sp, #16]
 800282a:	426d      	negs	r5, r5
 800282c:	7013      	strb	r3, [r2, #0]
 800282e:	4b61      	ldr	r3, [pc, #388]	; (80029b4 <_printf_i+0x21c>)
 8002830:	270a      	movs	r7, #10
 8002832:	9303      	str	r3, [sp, #12]
 8002834:	e01b      	b.n	800286e <_printf_i+0xd6>
 8002836:	680d      	ldr	r5, [r1, #0]
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	0641      	lsls	r1, r0, #25
 800283c:	d5f1      	bpl.n	8002822 <_printf_i+0x8a>
 800283e:	b22d      	sxth	r5, r5
 8002840:	e7ef      	b.n	8002822 <_printf_i+0x8a>
 8002842:	680d      	ldr	r5, [r1, #0]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	1d08      	adds	r0, r1, #4
 8002848:	6018      	str	r0, [r3, #0]
 800284a:	062e      	lsls	r6, r5, #24
 800284c:	d501      	bpl.n	8002852 <_printf_i+0xba>
 800284e:	680d      	ldr	r5, [r1, #0]
 8002850:	e003      	b.n	800285a <_printf_i+0xc2>
 8002852:	066d      	lsls	r5, r5, #25
 8002854:	d5fb      	bpl.n	800284e <_printf_i+0xb6>
 8002856:	680d      	ldr	r5, [r1, #0]
 8002858:	b2ad      	uxth	r5, r5
 800285a:	4b56      	ldr	r3, [pc, #344]	; (80029b4 <_printf_i+0x21c>)
 800285c:	2708      	movs	r7, #8
 800285e:	9303      	str	r3, [sp, #12]
 8002860:	2a6f      	cmp	r2, #111	; 0x6f
 8002862:	d000      	beq.n	8002866 <_printf_i+0xce>
 8002864:	3702      	adds	r7, #2
 8002866:	0023      	movs	r3, r4
 8002868:	2200      	movs	r2, #0
 800286a:	3343      	adds	r3, #67	; 0x43
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	6863      	ldr	r3, [r4, #4]
 8002870:	60a3      	str	r3, [r4, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	db03      	blt.n	800287e <_printf_i+0xe6>
 8002876:	2204      	movs	r2, #4
 8002878:	6821      	ldr	r1, [r4, #0]
 800287a:	4391      	bics	r1, r2
 800287c:	6021      	str	r1, [r4, #0]
 800287e:	2d00      	cmp	r5, #0
 8002880:	d102      	bne.n	8002888 <_printf_i+0xf0>
 8002882:	9e04      	ldr	r6, [sp, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00c      	beq.n	80028a2 <_printf_i+0x10a>
 8002888:	9e04      	ldr	r6, [sp, #16]
 800288a:	0028      	movs	r0, r5
 800288c:	0039      	movs	r1, r7
 800288e:	f7fd fccf 	bl	8000230 <__aeabi_uidivmod>
 8002892:	9b03      	ldr	r3, [sp, #12]
 8002894:	3e01      	subs	r6, #1
 8002896:	5c5b      	ldrb	r3, [r3, r1]
 8002898:	7033      	strb	r3, [r6, #0]
 800289a:	002b      	movs	r3, r5
 800289c:	0005      	movs	r5, r0
 800289e:	429f      	cmp	r7, r3
 80028a0:	d9f3      	bls.n	800288a <_printf_i+0xf2>
 80028a2:	2f08      	cmp	r7, #8
 80028a4:	d109      	bne.n	80028ba <_printf_i+0x122>
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	07db      	lsls	r3, r3, #31
 80028aa:	d506      	bpl.n	80028ba <_printf_i+0x122>
 80028ac:	6863      	ldr	r3, [r4, #4]
 80028ae:	6922      	ldr	r2, [r4, #16]
 80028b0:	4293      	cmp	r3, r2
 80028b2:	dc02      	bgt.n	80028ba <_printf_i+0x122>
 80028b4:	2330      	movs	r3, #48	; 0x30
 80028b6:	3e01      	subs	r6, #1
 80028b8:	7033      	strb	r3, [r6, #0]
 80028ba:	9b04      	ldr	r3, [sp, #16]
 80028bc:	1b9b      	subs	r3, r3, r6
 80028be:	6123      	str	r3, [r4, #16]
 80028c0:	9b07      	ldr	r3, [sp, #28]
 80028c2:	0021      	movs	r1, r4
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	9805      	ldr	r0, [sp, #20]
 80028c8:	9b06      	ldr	r3, [sp, #24]
 80028ca:	aa09      	add	r2, sp, #36	; 0x24
 80028cc:	f7ff fef4 	bl	80026b8 <_printf_common>
 80028d0:	1c43      	adds	r3, r0, #1
 80028d2:	d14c      	bne.n	800296e <_printf_i+0x1d6>
 80028d4:	2001      	movs	r0, #1
 80028d6:	4240      	negs	r0, r0
 80028d8:	b00b      	add	sp, #44	; 0x2c
 80028da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028dc:	3145      	adds	r1, #69	; 0x45
 80028de:	700a      	strb	r2, [r1, #0]
 80028e0:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <_printf_i+0x21c>)
 80028e2:	9203      	str	r2, [sp, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	6821      	ldr	r1, [r4, #0]
 80028e8:	ca20      	ldmia	r2!, {r5}
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	0608      	lsls	r0, r1, #24
 80028ee:	d516      	bpl.n	800291e <_printf_i+0x186>
 80028f0:	07cb      	lsls	r3, r1, #31
 80028f2:	d502      	bpl.n	80028fa <_printf_i+0x162>
 80028f4:	2320      	movs	r3, #32
 80028f6:	4319      	orrs	r1, r3
 80028f8:	6021      	str	r1, [r4, #0]
 80028fa:	2710      	movs	r7, #16
 80028fc:	2d00      	cmp	r5, #0
 80028fe:	d1b2      	bne.n	8002866 <_printf_i+0xce>
 8002900:	2320      	movs	r3, #32
 8002902:	6822      	ldr	r2, [r4, #0]
 8002904:	439a      	bics	r2, r3
 8002906:	6022      	str	r2, [r4, #0]
 8002908:	e7ad      	b.n	8002866 <_printf_i+0xce>
 800290a:	2220      	movs	r2, #32
 800290c:	6809      	ldr	r1, [r1, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	6022      	str	r2, [r4, #0]
 8002912:	0022      	movs	r2, r4
 8002914:	2178      	movs	r1, #120	; 0x78
 8002916:	3245      	adds	r2, #69	; 0x45
 8002918:	7011      	strb	r1, [r2, #0]
 800291a:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <_printf_i+0x220>)
 800291c:	e7e1      	b.n	80028e2 <_printf_i+0x14a>
 800291e:	0648      	lsls	r0, r1, #25
 8002920:	d5e6      	bpl.n	80028f0 <_printf_i+0x158>
 8002922:	b2ad      	uxth	r5, r5
 8002924:	e7e4      	b.n	80028f0 <_printf_i+0x158>
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	680d      	ldr	r5, [r1, #0]
 800292a:	1d10      	adds	r0, r2, #4
 800292c:	6949      	ldr	r1, [r1, #20]
 800292e:	6018      	str	r0, [r3, #0]
 8002930:	6813      	ldr	r3, [r2, #0]
 8002932:	062e      	lsls	r6, r5, #24
 8002934:	d501      	bpl.n	800293a <_printf_i+0x1a2>
 8002936:	6019      	str	r1, [r3, #0]
 8002938:	e002      	b.n	8002940 <_printf_i+0x1a8>
 800293a:	066d      	lsls	r5, r5, #25
 800293c:	d5fb      	bpl.n	8002936 <_printf_i+0x19e>
 800293e:	8019      	strh	r1, [r3, #0]
 8002940:	2300      	movs	r3, #0
 8002942:	9e04      	ldr	r6, [sp, #16]
 8002944:	6123      	str	r3, [r4, #16]
 8002946:	e7bb      	b.n	80028c0 <_printf_i+0x128>
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	1d11      	adds	r1, r2, #4
 800294c:	6019      	str	r1, [r3, #0]
 800294e:	6816      	ldr	r6, [r2, #0]
 8002950:	2100      	movs	r1, #0
 8002952:	0030      	movs	r0, r6
 8002954:	6862      	ldr	r2, [r4, #4]
 8002956:	f000 f831 	bl	80029bc <memchr>
 800295a:	2800      	cmp	r0, #0
 800295c:	d001      	beq.n	8002962 <_printf_i+0x1ca>
 800295e:	1b80      	subs	r0, r0, r6
 8002960:	6060      	str	r0, [r4, #4]
 8002962:	6863      	ldr	r3, [r4, #4]
 8002964:	6123      	str	r3, [r4, #16]
 8002966:	2300      	movs	r3, #0
 8002968:	9a04      	ldr	r2, [sp, #16]
 800296a:	7013      	strb	r3, [r2, #0]
 800296c:	e7a8      	b.n	80028c0 <_printf_i+0x128>
 800296e:	6923      	ldr	r3, [r4, #16]
 8002970:	0032      	movs	r2, r6
 8002972:	9906      	ldr	r1, [sp, #24]
 8002974:	9805      	ldr	r0, [sp, #20]
 8002976:	9d07      	ldr	r5, [sp, #28]
 8002978:	47a8      	blx	r5
 800297a:	1c43      	adds	r3, r0, #1
 800297c:	d0aa      	beq.n	80028d4 <_printf_i+0x13c>
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	079b      	lsls	r3, r3, #30
 8002982:	d415      	bmi.n	80029b0 <_printf_i+0x218>
 8002984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002986:	68e0      	ldr	r0, [r4, #12]
 8002988:	4298      	cmp	r0, r3
 800298a:	daa5      	bge.n	80028d8 <_printf_i+0x140>
 800298c:	0018      	movs	r0, r3
 800298e:	e7a3      	b.n	80028d8 <_printf_i+0x140>
 8002990:	0022      	movs	r2, r4
 8002992:	2301      	movs	r3, #1
 8002994:	9906      	ldr	r1, [sp, #24]
 8002996:	9805      	ldr	r0, [sp, #20]
 8002998:	9e07      	ldr	r6, [sp, #28]
 800299a:	3219      	adds	r2, #25
 800299c:	47b0      	blx	r6
 800299e:	1c43      	adds	r3, r0, #1
 80029a0:	d098      	beq.n	80028d4 <_printf_i+0x13c>
 80029a2:	3501      	adds	r5, #1
 80029a4:	68e3      	ldr	r3, [r4, #12]
 80029a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	42ab      	cmp	r3, r5
 80029ac:	dcf0      	bgt.n	8002990 <_printf_i+0x1f8>
 80029ae:	e7e9      	b.n	8002984 <_printf_i+0x1ec>
 80029b0:	2500      	movs	r5, #0
 80029b2:	e7f7      	b.n	80029a4 <_printf_i+0x20c>
 80029b4:	08002dd1 	.word	0x08002dd1
 80029b8:	08002de2 	.word	0x08002de2

080029bc <memchr>:
 80029bc:	b2c9      	uxtb	r1, r1
 80029be:	1882      	adds	r2, r0, r2
 80029c0:	4290      	cmp	r0, r2
 80029c2:	d101      	bne.n	80029c8 <memchr+0xc>
 80029c4:	2000      	movs	r0, #0
 80029c6:	4770      	bx	lr
 80029c8:	7803      	ldrb	r3, [r0, #0]
 80029ca:	428b      	cmp	r3, r1
 80029cc:	d0fb      	beq.n	80029c6 <memchr+0xa>
 80029ce:	3001      	adds	r0, #1
 80029d0:	e7f6      	b.n	80029c0 <memchr+0x4>

080029d2 <memcpy>:
 80029d2:	2300      	movs	r3, #0
 80029d4:	b510      	push	{r4, lr}
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d100      	bne.n	80029dc <memcpy+0xa>
 80029da:	bd10      	pop	{r4, pc}
 80029dc:	5ccc      	ldrb	r4, [r1, r3]
 80029de:	54c4      	strb	r4, [r0, r3]
 80029e0:	3301      	adds	r3, #1
 80029e2:	e7f8      	b.n	80029d6 <memcpy+0x4>

080029e4 <memmove>:
 80029e4:	b510      	push	{r4, lr}
 80029e6:	4288      	cmp	r0, r1
 80029e8:	d902      	bls.n	80029f0 <memmove+0xc>
 80029ea:	188b      	adds	r3, r1, r2
 80029ec:	4298      	cmp	r0, r3
 80029ee:	d303      	bcc.n	80029f8 <memmove+0x14>
 80029f0:	2300      	movs	r3, #0
 80029f2:	e007      	b.n	8002a04 <memmove+0x20>
 80029f4:	5c8b      	ldrb	r3, [r1, r2]
 80029f6:	5483      	strb	r3, [r0, r2]
 80029f8:	3a01      	subs	r2, #1
 80029fa:	d2fb      	bcs.n	80029f4 <memmove+0x10>
 80029fc:	bd10      	pop	{r4, pc}
 80029fe:	5ccc      	ldrb	r4, [r1, r3]
 8002a00:	54c4      	strb	r4, [r0, r3]
 8002a02:	3301      	adds	r3, #1
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1fa      	bne.n	80029fe <memmove+0x1a>
 8002a08:	e7f8      	b.n	80029fc <memmove+0x18>
	...

08002a0c <_free_r>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	0005      	movs	r5, r0
 8002a10:	2900      	cmp	r1, #0
 8002a12:	d010      	beq.n	8002a36 <_free_r+0x2a>
 8002a14:	1f0c      	subs	r4, r1, #4
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	da00      	bge.n	8002a1e <_free_r+0x12>
 8002a1c:	18e4      	adds	r4, r4, r3
 8002a1e:	0028      	movs	r0, r5
 8002a20:	f000 f918 	bl	8002c54 <__malloc_lock>
 8002a24:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <_free_r+0x90>)
 8002a26:	6813      	ldr	r3, [r2, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <_free_r+0x2c>
 8002a2c:	6063      	str	r3, [r4, #4]
 8002a2e:	6014      	str	r4, [r2, #0]
 8002a30:	0028      	movs	r0, r5
 8002a32:	f000 f917 	bl	8002c64 <__malloc_unlock>
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
 8002a38:	42a3      	cmp	r3, r4
 8002a3a:	d908      	bls.n	8002a4e <_free_r+0x42>
 8002a3c:	6821      	ldr	r1, [r4, #0]
 8002a3e:	1860      	adds	r0, r4, r1
 8002a40:	4283      	cmp	r3, r0
 8002a42:	d1f3      	bne.n	8002a2c <_free_r+0x20>
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	1841      	adds	r1, r0, r1
 8002a4a:	6021      	str	r1, [r4, #0]
 8002a4c:	e7ee      	b.n	8002a2c <_free_r+0x20>
 8002a4e:	001a      	movs	r2, r3
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <_free_r+0x4e>
 8002a56:	42a3      	cmp	r3, r4
 8002a58:	d9f9      	bls.n	8002a4e <_free_r+0x42>
 8002a5a:	6811      	ldr	r1, [r2, #0]
 8002a5c:	1850      	adds	r0, r2, r1
 8002a5e:	42a0      	cmp	r0, r4
 8002a60:	d10b      	bne.n	8002a7a <_free_r+0x6e>
 8002a62:	6820      	ldr	r0, [r4, #0]
 8002a64:	1809      	adds	r1, r1, r0
 8002a66:	1850      	adds	r0, r2, r1
 8002a68:	6011      	str	r1, [r2, #0]
 8002a6a:	4283      	cmp	r3, r0
 8002a6c:	d1e0      	bne.n	8002a30 <_free_r+0x24>
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	1841      	adds	r1, r0, r1
 8002a74:	6011      	str	r1, [r2, #0]
 8002a76:	6053      	str	r3, [r2, #4]
 8002a78:	e7da      	b.n	8002a30 <_free_r+0x24>
 8002a7a:	42a0      	cmp	r0, r4
 8002a7c:	d902      	bls.n	8002a84 <_free_r+0x78>
 8002a7e:	230c      	movs	r3, #12
 8002a80:	602b      	str	r3, [r5, #0]
 8002a82:	e7d5      	b.n	8002a30 <_free_r+0x24>
 8002a84:	6821      	ldr	r1, [r4, #0]
 8002a86:	1860      	adds	r0, r4, r1
 8002a88:	4283      	cmp	r3, r0
 8002a8a:	d103      	bne.n	8002a94 <_free_r+0x88>
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	1841      	adds	r1, r0, r1
 8002a92:	6021      	str	r1, [r4, #0]
 8002a94:	6063      	str	r3, [r4, #4]
 8002a96:	6054      	str	r4, [r2, #4]
 8002a98:	e7ca      	b.n	8002a30 <_free_r+0x24>
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	20000184 	.word	0x20000184

08002aa0 <sbrk_aligned>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	4e0f      	ldr	r6, [pc, #60]	; (8002ae0 <sbrk_aligned+0x40>)
 8002aa4:	000d      	movs	r5, r1
 8002aa6:	6831      	ldr	r1, [r6, #0]
 8002aa8:	0004      	movs	r4, r0
 8002aaa:	2900      	cmp	r1, #0
 8002aac:	d102      	bne.n	8002ab4 <sbrk_aligned+0x14>
 8002aae:	f000 f8bf 	bl	8002c30 <_sbrk_r>
 8002ab2:	6030      	str	r0, [r6, #0]
 8002ab4:	0029      	movs	r1, r5
 8002ab6:	0020      	movs	r0, r4
 8002ab8:	f000 f8ba 	bl	8002c30 <_sbrk_r>
 8002abc:	1c43      	adds	r3, r0, #1
 8002abe:	d00a      	beq.n	8002ad6 <sbrk_aligned+0x36>
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	1cc5      	adds	r5, r0, #3
 8002ac4:	439d      	bics	r5, r3
 8002ac6:	42a8      	cmp	r0, r5
 8002ac8:	d007      	beq.n	8002ada <sbrk_aligned+0x3a>
 8002aca:	1a29      	subs	r1, r5, r0
 8002acc:	0020      	movs	r0, r4
 8002ace:	f000 f8af 	bl	8002c30 <_sbrk_r>
 8002ad2:	1c43      	adds	r3, r0, #1
 8002ad4:	d101      	bne.n	8002ada <sbrk_aligned+0x3a>
 8002ad6:	2501      	movs	r5, #1
 8002ad8:	426d      	negs	r5, r5
 8002ada:	0028      	movs	r0, r5
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	20000188 	.word	0x20000188

08002ae4 <_malloc_r>:
 8002ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	1ccb      	adds	r3, r1, #3
 8002aea:	4393      	bics	r3, r2
 8002aec:	3308      	adds	r3, #8
 8002aee:	0006      	movs	r6, r0
 8002af0:	001f      	movs	r7, r3
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d232      	bcs.n	8002b5c <_malloc_r+0x78>
 8002af6:	270c      	movs	r7, #12
 8002af8:	42b9      	cmp	r1, r7
 8002afa:	d831      	bhi.n	8002b60 <_malloc_r+0x7c>
 8002afc:	0030      	movs	r0, r6
 8002afe:	f000 f8a9 	bl	8002c54 <__malloc_lock>
 8002b02:	4d32      	ldr	r5, [pc, #200]	; (8002bcc <_malloc_r+0xe8>)
 8002b04:	682b      	ldr	r3, [r5, #0]
 8002b06:	001c      	movs	r4, r3
 8002b08:	2c00      	cmp	r4, #0
 8002b0a:	d12e      	bne.n	8002b6a <_malloc_r+0x86>
 8002b0c:	0039      	movs	r1, r7
 8002b0e:	0030      	movs	r0, r6
 8002b10:	f7ff ffc6 	bl	8002aa0 <sbrk_aligned>
 8002b14:	0004      	movs	r4, r0
 8002b16:	1c43      	adds	r3, r0, #1
 8002b18:	d11e      	bne.n	8002b58 <_malloc_r+0x74>
 8002b1a:	682c      	ldr	r4, [r5, #0]
 8002b1c:	0025      	movs	r5, r4
 8002b1e:	2d00      	cmp	r5, #0
 8002b20:	d14a      	bne.n	8002bb8 <_malloc_r+0xd4>
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	0029      	movs	r1, r5
 8002b26:	18e3      	adds	r3, r4, r3
 8002b28:	0030      	movs	r0, r6
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	f000 f880 	bl	8002c30 <_sbrk_r>
 8002b30:	9b01      	ldr	r3, [sp, #4]
 8002b32:	4283      	cmp	r3, r0
 8002b34:	d143      	bne.n	8002bbe <_malloc_r+0xda>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	3703      	adds	r7, #3
 8002b3a:	1aff      	subs	r7, r7, r3
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	439f      	bics	r7, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	2f0c      	cmp	r7, #12
 8002b44:	d200      	bcs.n	8002b48 <_malloc_r+0x64>
 8002b46:	270c      	movs	r7, #12
 8002b48:	0039      	movs	r1, r7
 8002b4a:	0030      	movs	r0, r6
 8002b4c:	f7ff ffa8 	bl	8002aa0 <sbrk_aligned>
 8002b50:	1c43      	adds	r3, r0, #1
 8002b52:	d034      	beq.n	8002bbe <_malloc_r+0xda>
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	19df      	adds	r7, r3, r7
 8002b58:	6027      	str	r7, [r4, #0]
 8002b5a:	e013      	b.n	8002b84 <_malloc_r+0xa0>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	dacb      	bge.n	8002af8 <_malloc_r+0x14>
 8002b60:	230c      	movs	r3, #12
 8002b62:	2500      	movs	r5, #0
 8002b64:	6033      	str	r3, [r6, #0]
 8002b66:	0028      	movs	r0, r5
 8002b68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	1bd1      	subs	r1, r2, r7
 8002b6e:	d420      	bmi.n	8002bb2 <_malloc_r+0xce>
 8002b70:	290b      	cmp	r1, #11
 8002b72:	d917      	bls.n	8002ba4 <_malloc_r+0xc0>
 8002b74:	19e2      	adds	r2, r4, r7
 8002b76:	6027      	str	r7, [r4, #0]
 8002b78:	42a3      	cmp	r3, r4
 8002b7a:	d111      	bne.n	8002ba0 <_malloc_r+0xbc>
 8002b7c:	602a      	str	r2, [r5, #0]
 8002b7e:	6863      	ldr	r3, [r4, #4]
 8002b80:	6011      	str	r1, [r2, #0]
 8002b82:	6053      	str	r3, [r2, #4]
 8002b84:	0030      	movs	r0, r6
 8002b86:	0025      	movs	r5, r4
 8002b88:	f000 f86c 	bl	8002c64 <__malloc_unlock>
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	350b      	adds	r5, #11
 8002b90:	1d23      	adds	r3, r4, #4
 8002b92:	4395      	bics	r5, r2
 8002b94:	1aea      	subs	r2, r5, r3
 8002b96:	429d      	cmp	r5, r3
 8002b98:	d0e5      	beq.n	8002b66 <_malloc_r+0x82>
 8002b9a:	1b5b      	subs	r3, r3, r5
 8002b9c:	50a3      	str	r3, [r4, r2]
 8002b9e:	e7e2      	b.n	8002b66 <_malloc_r+0x82>
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	e7ec      	b.n	8002b7e <_malloc_r+0x9a>
 8002ba4:	6862      	ldr	r2, [r4, #4]
 8002ba6:	42a3      	cmp	r3, r4
 8002ba8:	d101      	bne.n	8002bae <_malloc_r+0xca>
 8002baa:	602a      	str	r2, [r5, #0]
 8002bac:	e7ea      	b.n	8002b84 <_malloc_r+0xa0>
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	e7e8      	b.n	8002b84 <_malloc_r+0xa0>
 8002bb2:	0023      	movs	r3, r4
 8002bb4:	6864      	ldr	r4, [r4, #4]
 8002bb6:	e7a7      	b.n	8002b08 <_malloc_r+0x24>
 8002bb8:	002c      	movs	r4, r5
 8002bba:	686d      	ldr	r5, [r5, #4]
 8002bbc:	e7af      	b.n	8002b1e <_malloc_r+0x3a>
 8002bbe:	230c      	movs	r3, #12
 8002bc0:	0030      	movs	r0, r6
 8002bc2:	6033      	str	r3, [r6, #0]
 8002bc4:	f000 f84e 	bl	8002c64 <__malloc_unlock>
 8002bc8:	e7cd      	b.n	8002b66 <_malloc_r+0x82>
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	20000184 	.word	0x20000184

08002bd0 <_realloc_r>:
 8002bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bd2:	0007      	movs	r7, r0
 8002bd4:	000e      	movs	r6, r1
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	2900      	cmp	r1, #0
 8002bda:	d105      	bne.n	8002be8 <_realloc_r+0x18>
 8002bdc:	0011      	movs	r1, r2
 8002bde:	f7ff ff81 	bl	8002ae4 <_malloc_r>
 8002be2:	0005      	movs	r5, r0
 8002be4:	0028      	movs	r0, r5
 8002be6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	d103      	bne.n	8002bf4 <_realloc_r+0x24>
 8002bec:	f7ff ff0e 	bl	8002a0c <_free_r>
 8002bf0:	0025      	movs	r5, r4
 8002bf2:	e7f7      	b.n	8002be4 <_realloc_r+0x14>
 8002bf4:	f000 f83e 	bl	8002c74 <_malloc_usable_size_r>
 8002bf8:	9001      	str	r0, [sp, #4]
 8002bfa:	4284      	cmp	r4, r0
 8002bfc:	d803      	bhi.n	8002c06 <_realloc_r+0x36>
 8002bfe:	0035      	movs	r5, r6
 8002c00:	0843      	lsrs	r3, r0, #1
 8002c02:	42a3      	cmp	r3, r4
 8002c04:	d3ee      	bcc.n	8002be4 <_realloc_r+0x14>
 8002c06:	0021      	movs	r1, r4
 8002c08:	0038      	movs	r0, r7
 8002c0a:	f7ff ff6b 	bl	8002ae4 <_malloc_r>
 8002c0e:	1e05      	subs	r5, r0, #0
 8002c10:	d0e8      	beq.n	8002be4 <_realloc_r+0x14>
 8002c12:	9b01      	ldr	r3, [sp, #4]
 8002c14:	0022      	movs	r2, r4
 8002c16:	429c      	cmp	r4, r3
 8002c18:	d900      	bls.n	8002c1c <_realloc_r+0x4c>
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	0031      	movs	r1, r6
 8002c1e:	0028      	movs	r0, r5
 8002c20:	f7ff fed7 	bl	80029d2 <memcpy>
 8002c24:	0031      	movs	r1, r6
 8002c26:	0038      	movs	r0, r7
 8002c28:	f7ff fef0 	bl	8002a0c <_free_r>
 8002c2c:	e7da      	b.n	8002be4 <_realloc_r+0x14>
	...

08002c30 <_sbrk_r>:
 8002c30:	2300      	movs	r3, #0
 8002c32:	b570      	push	{r4, r5, r6, lr}
 8002c34:	4d06      	ldr	r5, [pc, #24]	; (8002c50 <_sbrk_r+0x20>)
 8002c36:	0004      	movs	r4, r0
 8002c38:	0008      	movs	r0, r1
 8002c3a:	602b      	str	r3, [r5, #0]
 8002c3c:	f7fe f852 	bl	8000ce4 <_sbrk>
 8002c40:	1c43      	adds	r3, r0, #1
 8002c42:	d103      	bne.n	8002c4c <_sbrk_r+0x1c>
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d000      	beq.n	8002c4c <_sbrk_r+0x1c>
 8002c4a:	6023      	str	r3, [r4, #0]
 8002c4c:	bd70      	pop	{r4, r5, r6, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	2000018c 	.word	0x2000018c

08002c54 <__malloc_lock>:
 8002c54:	b510      	push	{r4, lr}
 8002c56:	4802      	ldr	r0, [pc, #8]	; (8002c60 <__malloc_lock+0xc>)
 8002c58:	f000 f814 	bl	8002c84 <__retarget_lock_acquire_recursive>
 8002c5c:	bd10      	pop	{r4, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	20000190 	.word	0x20000190

08002c64 <__malloc_unlock>:
 8002c64:	b510      	push	{r4, lr}
 8002c66:	4802      	ldr	r0, [pc, #8]	; (8002c70 <__malloc_unlock+0xc>)
 8002c68:	f000 f80d 	bl	8002c86 <__retarget_lock_release_recursive>
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	20000190 	.word	0x20000190

08002c74 <_malloc_usable_size_r>:
 8002c74:	1f0b      	subs	r3, r1, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1f18      	subs	r0, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da01      	bge.n	8002c82 <_malloc_usable_size_r+0xe>
 8002c7e:	580b      	ldr	r3, [r1, r0]
 8002c80:	18c0      	adds	r0, r0, r3
 8002c82:	4770      	bx	lr

08002c84 <__retarget_lock_acquire_recursive>:
 8002c84:	4770      	bx	lr

08002c86 <__retarget_lock_release_recursive>:
 8002c86:	4770      	bx	lr

08002c88 <_init>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr

08002c94 <_fini>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr
